{
  "createdAt": "2025-08-31T13:44:08.878Z",
  "updatedAt": "2025-08-31T19:30:01.000Z",
  "id": "RVcNYGSV5IWNx7CO",
  "name": "DNS Update",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "url": "https://api.ipify.org?format=json",
        "options": {}
      },
      "id": "81c2152e-eb92-448f-b3ed-9dfabad122b6",
      "name": "Get Current IP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -2272,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// This code goes in the \"Prepare Sites\" node\n// Make sure this node has inputs from BOTH:\n// - \"Get Current IP\" \n// - \"Get Existing DNS Records\"\n\nconst domain = 'alex-it.net';\nconst zoneID = '3462e9f3ae9f12d67018a49274db3def';\n\n// Get all inputs and debug what we're receiving\nconst allInputs = $input.all();\nconsole.log('All inputs received:', allInputs.map(item => Object.keys(item.json)));\n\n// Find current IP (from Get Current IP node)\nconst ipInput = allInputs.find(item => item.json && item.json.ip);\nconst currentIP = ipInput ? ipInput.json.ip : null;\n\n// Find DNS records (from Get Existing DNS Records node) \nconst dnsInput = allInputs.find(item => item.json && item.json.result);\nconst dnsResponse = dnsInput ? dnsInput.json : null;\n\nconsole.log('Current IP found:', currentIP);\nconsole.log('DNS response found:', !!dnsResponse);\n\nif (!currentIP) {\n  throw new Error('Could not find current IP in inputs');\n}\n\nif (!dnsResponse || !dnsResponse.success || !dnsResponse.result) {\n  console.log('Warning: Could not fetch existing DNS records, using fallback list');\n  \n  // Fallback to your original hardcoded list\n  const fallbackSites = [\n    { subdomain: 'grafana' },\n    { subdomain: 'ha' },\n    { subdomain: 'it-assets' },\n    { subdomain: 'n8n' },\n    { subdomain: 'portainer' },\n    { subdomain: 'vault' },\n    { subdomain: '8n8.pi' },\n    { subdomain: 'pihole' },\n    { subdomain: 'portainer.pi' }\n  ];\n  \n  return [{\n    json: {\n      domain,\n      zoneID,\n      newIP: currentIP,\n      sites: fallbackSites.map(s => ({ ...s, fqdn: `${s.subdomain}.${domain}` }))\n    }\n  }];\n}\n\n// Extract subdomains from existing A records\nconst sites = dnsResponse.result\n  .filter(record => record.name.endsWith(`.${domain}`) || record.name === domain)\n  .map(record => {\n    const subdomain = record.name === domain ? '@' : record.name.replace(`.${domain}`, '');\n    return { subdomain };\n  });\n\n// Add any new subdomains you want to always include (optional)\nconst alwaysInclude = [\n  // { subdomain: 'new-service' }, // Uncomment and add new services here\n];\n\n// Merge existing and new subdomains (remove duplicates)\nconst allSites = [...sites, ...alwaysInclude.filter(newSite => \n  !sites.some(existingSite => existingSite.subdomain === newSite.subdomain)\n)];\n\nconsole.log(`Found ${allSites.length} sites to manage:`, allSites.map(s => s.subdomain));\n\nreturn [{\n  json: {\n    domain,\n    zoneID,\n    newIP: currentIP,\n    sites: allSites.map(s => ({ \n      ...s, \n      fqdn: s.subdomain === '@' ? domain : `${s.subdomain}.${domain}` \n    }))\n  }\n}];"
      },
      "id": "c477cff0-9f37-4f1d-855a-90f4cc7e5527",
      "name": "Prepare Sites",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2000,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fan out one item per FQDN, attach zoneID\nconst original = $input.first().json;\n\nif (!original || !Array.isArray(original.sites)) throw new Error('sites missing or not an array');\n\nreturn original.sites.map(site => ({\n  json: {\n    subdomain: site.subdomain,\n    fqdn: site.fqdn,\n    domain: original.domain,\n    newIP: original.newIP,\n    zoneID: original.zoneID\n  }\n}));"
      },
      "id": "b56d335d-1444-4bc5-ad24-99c9d9ee75c7",
      "name": "Expand Sites",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1696,
        304
      ]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.cloudflare.com/client/v4/zones/' + $json.zoneID + '/dns_records?type=A&name=' + $json.fqdn }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareApi",
        "options": {}
      },
      "id": "57de58d2-41f5-4383-b91f-5696bc947d3c",
      "name": "Get DNS Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1424,
        304
      ],
      "credentials": {
        "cloudflareApi": {
          "id": "23zTRVy3Y1m8sopZ",
          "name": "Cloudflare account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge Cloudflare response with original site data using paired items\nconst cfItems = $input.all();\nreturn cfItems.map((item, i) => {\n  const pairedIndex = (item.pairedItem && item.pairedItem.item != null) ? item.pairedItem.item : i;\n  const original = $items('Expand Sites')[pairedIndex].json;\n  const record = item.json?.result?.[0] || {};\n\n  return {\n    json: {\n      subdomain: original.subdomain,\n      fqdn: original.fqdn,\n      domain: original.domain,\n      newIP: original.newIP,\n      zoneID: original.zoneID,\n      recordId: record.id || '',\n      existingIP: record.content || '',\n      existingTTL: record.ttl != null ? record.ttl : 1,\n      existingProxied: record.proxied != null ? record.proxied : false\n    }\n  };\n});"
      },
      "id": "d850da48-3f10-4e76-9ea1-b25e639c1677",
      "name": "Prepare Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1152,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Evaluate each incoming item (one per FQDN)\nconst items = $input.all();\n\nconst desiredTTL = 1;         // Cloudflare \"Auto\"\nconst desiredProxied = false; // DNS only\n\nreturn items.map(item => {\n  const j = item.json;\n  const hasRecord = !!j.recordId;\n\n  const needsUpdate =\n    !hasRecord ||\n    j.existingIP !== j.newIP ||\n    j.existingTTL !== desiredTTL ||\n    j.existingProxied !== desiredProxied;\n\n  console.log(\n    `[${j.fqdn}] ${j.existingIP || '<none>'} -> ${j.newIP} | ttl:${j.existingTTL} proxied:${j.existingProxied} | update? ${needsUpdate}`\n  );\n\n  return {\n    json: { ...j, hasRecord, needsUpdate, desiredTTL, desiredProxied }\n  };\n});\n"
      },
      "id": "be666d68-8cba-4b95-bd79-28e02ecf790b",
      "name": "Check If Update Needed",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        304
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "cond-needs",
              "leftValue": "={{ $json.needsUpdate }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9d0b697e-6438-4cf4-8d00-5bafa49e287a",
      "name": "Needs Update?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -608,
        304
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "cond-hasrec",
              "leftValue": "={{ $json.hasRecord }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "95a3c99b-3c68-4ae2-825f-694ae4911baa",
      "name": "Has Record?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -352,
        16
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ 'https://api.cloudflare.com/client/v4/zones/' + $json.zoneID + '/dns_records/' + $json.recordId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ type: 'A', name: $json.fqdn, content: $json.newIP, ttl: $json.desiredTTL, proxied: $json.desiredProxied }) }}",
        "options": {}
      },
      "id": "2e43b05a-40d4-46c4-b23f-743c91dddf84",
      "name": "Update A Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        0
      ],
      "credentials": {
        "cloudflareApi": {
          "id": "23zTRVy3Y1m8sopZ",
          "name": "Cloudflare account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ 'https://api.cloudflare.com/client/v4/zones/' + $json.zoneID + '/dns_records' }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ type: 'A', name: $json.fqdn, content: $json.newIP, ttl: $json.desiredTTL, proxied: $json.desiredProxied }) }}",
        "options": {}
      },
      "id": "e4f11839-8728-42b9-bf05-9173ea245078",
      "name": "Create A Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -240,
        704
      ],
      "credentials": {
        "cloudflareApi": {
          "id": "23zTRVy3Y1m8sopZ",
          "name": "Cloudflare account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const res = item.json || {};\n  const fqdn = (res.result && res.result.name) || res.name || 'unknown';\n  const success = res.success === true;\n  const error = success ? undefined : ((res.errors && res.errors[0] && res.errors[0].message) || res.message || 'Unknown error');\n  return { json: { success, action: 'updated', fqdn, error } };\n});"
      },
      "id": "7f2ad1c3-e15c-447d-98cb-740506629999",
      "name": "Validate Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const res = item.json || {};\n  const fqdn = (res.result && res.result.name) || res.name || 'unknown';\n  const success = res.success === true;\n  const error = success ? undefined : ((res.errors && res.errors[0] && res.errors[0].message) || res.message || 'Unknown error');\n  return { json: { success, action: 'created', fqdn, error } };\n});"
      },
      "id": "557a3667-9bba-4ebd-825e-2b361c59c9ae",
      "name": "Validate Create",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        704
      ]
    },
    {
      "parameters": {
        "jsCode": "// No update needed. Pass a success message to the merge node.\nreturn [{ json: { success: true, action: 'no_change', fqdn: $json.fqdn } }];"
      },
      "id": "d39bb1b5-0c02-417f-a62a-f586688ea259",
      "name": "No Update Needed",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "const results = $input.all();\nconst timestamp = new Date().toISOString();\nlet created = 0, updated = 0, noChange = 0, failed = 0;\n\nconst createdFQDNs = [];\nconst updatedFQDNs = [];\n\nfor (const item of results) {\n  const r = item.json;\n  if (!r || r.success === false) {\n    failed++;\n    continue;\n  }\n\n  if (r.action === 'created') {\n    created++;\n    createdFQDNs.push(r.fqdn);\n  } else if (r.action === 'updated') {\n    updated++;\n    updatedFQDNs.push(r.fqdn);\n  } else if (r.action === 'no_change') {\n    noChange++;\n  }\n}\n\nconsole.log(`DNS Summary ${timestamp} -> created: ${created}, updated: ${updated}, no change: ${noChange}, failed: ${failed}`);\n\nreturn [{\n  json: {\n    timestamp,\n    created,\n    updated,\n    noChange,\n    failed,\n    total: results.length,\n    createdFQDNs,\n    updatedFQDNs\n  }\n}];\n"
      },
      "id": "0dd6da8e-299a-4266-b68d-8374d3d20077",
      "name": "Log Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        304
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2592,
        304
      ],
      "id": "08c42db6-1182-4f05-9fdc-024e219ff8c7",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09DL842ZUY",
          "mode": "list",
          "cachedResultName": "dns-update"
        },
        "text": "={{$json[\"message\"]}}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1008,
        304
      ],
      "id": "2897cf5d-a043-4af9-9b5d-d4d5b2ed3561",
      "name": "Send a message",
      "webhookId": "715abbee-bf64-4952-9fc1-d1765c1cf218",
      "credentials": {
        "slackApi": {
          "id": "xYXRUa67wS2uc8Ii",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const timestamp = new Date().toLocaleString(\"en-GB\", {\n  timeZone: \"Asia/Jerusalem\",\n  hour12: false\n}).replace(\",\", \"\");\n\n// 📦 Base summary line\nconst summary = '🛰️ DNS Summary ' + timestamp;\n\n// 🔁 Updated domains with IP diff\nconst updatedText = ($json[\"updatedFQDNs\"] && $json[\"updatedFQDNs\"].length > 0)\n  ? \"\\n\\n:repeat: Updated domains with new IPs:\\n\" +\n    $json[\"updatedFQDNs\"]\n      .map(fqdn => {\n        const match = $items('Prepare Payload').find(i => i.json.fqdn === fqdn);\n        const newIP = match?.json?.newIP || 'unknown';\n        const oldIP = match?.json?.existingIP || 'unknown';\n        return `${fqdn} updated to ${newIP} from old IP ${oldIP}`;\n      }).join(\"\\n\")\n  : \"\";\n\n// 🆕 Created domains\nconst createdText = ($json[\"createdFQDNs\"] && $json[\"createdFQDNs\"].length > 0)\n  ? \"\\n\\n:new: Created domains:\\n\" + $json[\"createdFQDNs\"].join(\"\\n\")\n  : \"\";\n\n// ✅ No change message\nif ($json[\"created\"] === 0 && $json[\"updated\"] === 0 && $json[\"failed\"] === 0) {\n  return [{\n    json: {\n      message: `✅ DNS check completed at ${timestamp} — no changes detected.`\n    }\n  }];\n}\n\n// 📩 Final formatted Slack message\nreturn [{\n  json: {\n    message: summary + updatedText + createdText\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        304
      ],
      "id": "e5044c25-f95f-4a04-9bfc-7477e1fdb7f6",
      "name": "Item Lists"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        304,
        304
      ],
      "id": "a8cd004e-2c3e-46e3-998c-b143f1967d2f",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Your domain records\nconst sites = [\n  { subdomain: 'grafana' },\n  { subdomain: 'ha' },\n  { subdomain: 'it-assets' },\n  { subdomain: 'n8n' },\n  { subdomain: 'portainer' },\n  { subdomain: 'vault' },\n  { subdomain: '8n8.pi' },\n  { subdomain: 'pihole' },\n  { subdomain: 'portainer.pi' }\n];\n\nconst domain = 'alex-it.net';\nconst currentIP = $input.first().json.ip;\nconst zoneID = '3462e9f3ae9f12d67018a49274db3def'; // <-- your zone id\n\nreturn [{\n  json: {\n    domain,\n    zoneID,\n    newIP: currentIP,\n    sites: sites.map(s => ({ ...s, fqdn: `${s.subdomain}.${domain}` }))\n  }\n}];"
      },
      "id": "0d0d624a-5b93-4ffc-8399-e041bcdb7de7",
      "name": "Prepare Sites1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1712,
        864
      ],
      "disabled": true
    }
  ],
  "connections": {
    "Get Current IP": {
      "main": [
        [
          {
            "node": "Prepare Sites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Sites": {
      "main": [
        [
          {
            "node": "Expand Sites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expand Sites": {
      "main": [
        [
          {
            "node": "Get DNS Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get DNS Record": {
      "main": [
        [
          {
            "node": "Prepare Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Payload": {
      "main": [
        [
          {
            "node": "Check If Update Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Update Needed": {
      "main": [
        [
          {
            "node": "Needs Update?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Update?": {
      "main": [
        [
          {
            "node": "Has Record?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Update Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Record?": {
      "main": [
        [
          {
            "node": "Update A Record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create A Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update A Record": {
      "main": [
        [
          {
            "node": "Validate Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create A Record": {
      "main": [
        [
          {
            "node": "Validate Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Update Needed": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Validate Update": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Create": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Current IP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Summary": {
      "main": [
        [
          {
            "node": "Item Lists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Item Lists": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Log Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "7a97e25c-12b1-4c79-84f2-10784afc9ecc",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-31T13:44:08.888Z",
      "updatedAt": "2025-08-31T13:44:08.888Z",
      "role": "workflow:owner",
      "workflowId": "RVcNYGSV5IWNx7CO",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}