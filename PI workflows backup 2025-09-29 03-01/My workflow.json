{
  "createdAt": "2025-09-28T16:51:52.912Z",
  "updatedAt": "2025-09-28T22:21:38.000Z",
  "id": "WvXu0pxOgmwwtlqd",
  "name": "My workflow",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -976,
        208
      ],
      "id": "39d5281a-e235-4d27-84fe-082fdd4bbd96",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv06h76",
        "limit": 67
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        -720,
        208
      ],
      "id": "becf5501-6c15-4089-9968-2a3e1d3b26a4",
      "name": "Get Monday Items1",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const targetSerials = [\n  'PC11AFQA', 'PF1KBWFN', 'PC18747L', 'PF1PEQXQ', 'PF13LXDK', 'PF1DDJC2', \n  'PF1SC5EZ', 'C02DQKTEQ05D', 'PF1PEQXC', 'PF1MQE1V', 'PF2RDLVD', 'PC1HBQQZ', \n  'PF1FYY9G', 'PF3B7PRH', 'PC0Y185J', 'PC0KNZ47', 'PF1M27XD', 'PC1MN3C1', \n  'PC1MN3C5', 'PC1MRL9X', 'PC11AFM5', 'PF1317SM', 'PC1LT958', 'PC0YBY3F', \n  'PF2863QC', 'PC1MN3C0', 'PC1HBRG3', 'PC101S2W', 'PC1MN3C3', 'PC13B1RK', \n  'PF1MQKAY', 'PF1SBWQ2', 'CND6420ZJS', 'PF37SHLR', 'PF2N1ZKH', 'PF37X5HN', \n  'R914EQLK', 'PF37RGE3', 'PF2RDK5Q', 'R914EQLB', 'PC151RNN', 'PF0YB9SG', \n  'PF3BGR7A', 'PF0NZNWE', 'PF3BGDJC', '20L7002CUS', 'PC0WWFKP', 'MP193DQL', \n  'R914EQLC', 'PF3B7Y3A', 'PF3B8G5L', 'PF2RDFMM', 'PF2RDLWA', 'R914EQLM', \n  'PF2RDHJT', 'PF2RDLS7', 'PF2RDK24', 'PF2RDMN1', 'PF24ET8Y', 'PF2RCDJK', \n  'PF3BGJ3Z', 'PF3B7VN4', 'PF2RDK56', 'PC1MN3C4', 'PC1MRL9W', 'PC1MN3C7', \n  'PF3117SE'\n];\n\nconst items = $input.all();\nconst itemsToProcess = [];\nconst skippedDevices = [];\nconst notFoundDevices = [];\n\nfunction getDeviceType(serial) {\n  if (serial.startsWith('C02') && serial.length >= 10) return 'Apple';\n  if (serial.startsWith('CND')) return 'Dell';\n  if (serial.match(/^(PC|PF)/)) return 'Lenovo';\n  if (serial.startsWith('R914')) return 'Lenovo';\n  if (serial.match(/^\\d+[A-Z]+$/)) return 'Lenovo';\n  if (serial.startsWith('MP')) return 'Unknown';\n  return 'Unknown';\n}\n\nconsole.log(`🔍 Processing ${targetSerials.length} target devices...`);\n\n// Create a map of all Monday.com items for faster lookup\nconst mondayItemsMap = new Map();\nitems.forEach(item => {\n  const serial = item.json.name?.trim();\n  if (serial) {\n    mondayItemsMap.set(serial, item);\n  }\n});\n\nconsole.log(`📋 Found ${mondayItemsMap.size} total items in Monday.com`);\n\n// Process each target serial\ntargetSerials.forEach(targetSerial => {\n  const item = mondayItemsMap.get(targetSerial);\n  \n  if (item) {\n    const deviceType = getDeviceType(targetSerial);\n    \n    if (deviceType === 'Lenovo') {\n      console.log(`✅ ${targetSerial} - Lenovo device (ID: ${item.json.id})`);\n      itemsToProcess.push({\n        json: {\n          itemId: item.json.id,\n          itemName: item.json.name,\n          serialNumber: targetSerial,\n          deviceType\n        }\n      });\n    } else {\n      console.log(`⏭️ ${targetSerial} - ${deviceType} device (skipped)`);\n      skippedDevices.push({\n        serial: targetSerial,\n        type: deviceType,\n        reason: 'Not Lenovo device'\n      });\n    }\n  } else {\n    console.log(`❌ ${targetSerial} - Not found in Monday.com`);\n    notFoundDevices.push(targetSerial);\n  }\n});\n\nconsole.log(`\\n📊 PROCESSING SUMMARY:`);\nconsole.log(`   ✅ Lenovo devices to process: ${itemsToProcess.length}`);\nconsole.log(`   ⏭️ Non-Lenovo devices skipped: ${skippedDevices.length}`);\nconsole.log(`   ❌ Not found in Monday.com: ${notFoundDevices.length}`);\n\nif (skippedDevices.length > 0) {\n  console.log(`\\n⏭️ SKIPPED DEVICES (Non-Lenovo):`);\n  skippedDevices.forEach(dev => console.log(`   - ${dev.serial} (${dev.type})`));\n}\n\nif (notFoundDevices.length > 0) {\n  console.log(`\\n❌ NOT FOUND IN MONDAY.COM:`);\n  notFoundDevices.forEach(serial => console.log(`   - ${serial}`));\n}\n\nif (itemsToProcess.length > 0) {\n  console.log(`\\n🚀 PROCESSING ${itemsToProcess.length} LENOVO DEVICES...`);\n  return itemsToProcess;\n} else {\n  return [{\n    json: {\n      message: \"No Lenovo devices found to process\",\n      summary: {\n        total: targetSerials.length,\n        lenovo: itemsToProcess.length,\n        skipped: skippedDevices.length,\n        notFound: notFoundDevices.length\n      },\n      skippedDevices,\n      notFoundDevices\n    }\n  }];\n}"
      },
      "id": "107da51d-510f-4a7c-b360-25718fdbad3f",
      "name": "Filter Target Items1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        208
      ]
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"Invoke-WebRequest 'https://pcsupport.lenovo.com/gb/en/api/v4/mse/getproducts?productId={{ $json.serialNumber }}' | Select-Object -ExpandProperty Content | Out-String | Write-Output\"",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        192,
        208
      ],
      "id": "cc84a9f1-436f-451c-8aca-0fbd6dca422f",
      "name": "Get Model2",
      "credentials": {
        "sshPassword": {
          "id": "79KNHZGwd8w288i9",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse Lenovo API response for the CURRENT device being processed\nconst lenovoData = JSON.parse($json.stdout);\n\n// In \"Run Once for Each Item\" mode, get serial from Lenovo API response\nlet itemId, serialNumber;\n\n// Get serial from Lenovo API response and match back to your original data\nif (Array.isArray(lenovoData) && lenovoData.length > 0) {\n  const apiSerial = lenovoData.find(item => item.Serial)?.Serial;\n  serialNumber = apiSerial;\n  \n  // Hardcoded mapping from your earlier output\n const serialToIdMap = {\n  'PC11AFQA': '1309009519',\n  'PF13LXDK': '1153799554',\n  'PF1SC5EZ': '1153799633',\n  'PF1MQE1V': '1153799803',\n  'PC18747L': '1309006782',\n  'PF1PEQXQ': '1153799523',\n  'PF1PEQXC': '1153799722',\n  'PF1DDJC2': '1153799627',\n  'PF1KBWFN': '1309004276',\n  'PF2RDLVD': '1153799833',\n  'PC0YBY3F': '1153799473',\n  'PC1EHTW4': '1153799487',\n  'PF38J07E': '1153799490',\n  'C02FX667ML85': '1153799491',\n  'C02DQNJ5Q05D': '1153799493',\n  '1P7YRC2': '1153799494',\n  'C02W52A4HV2R': '1153799498',\n  'PC0YDEPQ': '1153799511',\n  'FVFG11FDQ05P': '1153799512',\n  'PF2V5AH8': '1153799519',\n  'C02FD3RKML85': '1153799520',\n  'PF1D7TT8': '1153799521',\n  'PF1G05QW': '1153799524',\n  'C02F32RCML85': '1153799525',\n  'PC0WWGCH': '1153799533',\n  'C02Z528PLVDM': '1153799537',\n  'FVHDV1ZKQ05D': '1153799538',\n  'C02F60PZML85': '1153799539',\n  'PF2W1DWR': '1153799541',\n  'PF1FNFBP': '1153799542',\n  'FVFG11F2Q05P': '1153799552',\n  'C02DQ677ML85': '1153799566',\n  'PF1FNB6X': '1153799569',\n  'C02F61PGML85': '1153799573',\n  'PC0WWFSY': '1153799578',\n  'C02DQM19Q05D': '1153799580',\n  'PC1MRL9W': '1153799584',\n  'C02DQKWDQ05D': '1153799589',\n  '23V36H2': '1153799593',\n  'PF1Q49SV': '1153799594',\n  'PF2RDFMM': '1153799598',\n  'PF3B7VN4': '1153799609',\n  'PF1KNDK7': '1153799614',\n  'BHLCWT2': '1153799618',\n  'PF1KJA6P': '1153799623',\n  'PF2N1ZKH': '1153799624',\n  'FVFFG3FXQ05P': '1153799626',\n  'C02G479HML85': '1153799628',\n  'PF1P8ANH': '1153799644',\n  'C02DQMMNQ05D': '1153799648',\n  'PF1Q975E': '1153799651',\n  'PF2863QC': '1153799657',\n  'FVFG802VQ05P': '1153799668',\n  'C02D960PP3Y1': '1153799670',\n  'PC1MN3C0': '1153799673',\n  'C02DQKTEQ05D': '1153799676',\n  'C02FN05DML85': '1153799677',\n  'C02Y12UXJHD3': '1153799680',\n  'PF391EAA': '1153799682',\n  'B5D65H2': '1153799685',\n  'C02CV1M8ML87': '1153799688',\n  'C02DQKL9Q05D': '1153799695',\n  'C02FJ4M8ML85': '1153799699',\n  'PC1MN3C4': '1153799718',\n  'PF24ET8Y': '1153799738',\n  'FVFGK3LWQ05P': '1153799739',\n  'C02F60NXML85': '1153799742',\n  'PC151RNN': '1153799744',\n  '2FCGPF2': '1153799746',\n  'PF15QVLK': '1153799750'\n};\n  \n  itemId = serialToIdMap[serialNumber];\n} else if (lenovoData && !Array.isArray(lenovoData)) {\n  serialNumber = lenovoData.Serial;\n  const serialToIdMap = {\n  'PC11AFQA': '1309009519',\n  'PF13LXDK': '1153799554',\n  'PF1SC5EZ': '1153799633',\n  'PF1MQE1V': '1153799803',\n  'PC18747L': '1309006782',\n  'PF1PEQXQ': '1153799523',\n  'PF1PEQXC': '1153799722',\n  'PF1DDJC2': '1153799627',\n  'PF1KBWFN': '1309004276',\n  'PF2RDLVD': '1153799833',\n  'PC0YBY3F': '1153799473',\n  'PC1EHTW4': '1153799487',\n  'PF38J07E': '1153799490',\n  'C02FX667ML85': '1153799491',\n  'C02DQNJ5Q05D': '1153799493',\n  '1P7YRC2': '1153799494',\n  'C02W52A4HV2R': '1153799498',\n  'PC0YDEPQ': '1153799511',\n  'FVFG11FDQ05P': '1153799512',\n  'PF2V5AH8': '1153799519',\n  'C02FD3RKML85': '1153799520',\n  'PF1D7TT8': '1153799521',\n  'PF1G05QW': '1153799524',\n  'C02F32RCML85': '1153799525',\n  'PC0WWGCH': '1153799533',\n  'C02Z528PLVDM': '1153799537',\n  'FVHDV1ZKQ05D': '1153799538',\n  'C02F60PZML85': '1153799539',\n  'PF2W1DWR': '1153799541',\n  'PF1FNFBP': '1153799542',\n  'FVFG11F2Q05P': '1153799552',\n  'C02DQ677ML85': '1153799566',\n  'PF1FNB6X': '1153799569',\n  'C02F61PGML85': '1153799573',\n  'PC0WWFSY': '1153799578',\n  'C02DQM19Q05D': '1153799580',\n  'PC1MRL9W': '1153799584',\n  'C02DQKWDQ05D': '1153799589',\n  '23V36H2': '1153799593',\n  'PF1Q49SV': '1153799594',\n  'PF2RDFMM': '1153799598',\n  'PF3B7VN4': '1153799609',\n  'PF1KNDK7': '1153799614',\n  'BHLCWT2': '1153799618',\n  'PF1KJA6P': '1153799623',\n  'PF2N1ZKH': '1153799624',\n  'FVFFG3FXQ05P': '1153799626',\n  'C02G479HML85': '1153799628',\n  'PF1P8ANH': '1153799644',\n  'C02DQMMNQ05D': '1153799648',\n  'PF1Q975E': '1153799651',\n  'PF2863QC': '1153799657',\n  'FVFG802VQ05P': '1153799668',\n  'C02D960PP3Y1': '1153799670',\n  'PC1MN3C0': '1153799673',\n  'C02DQKTEQ05D': '1153799676',\n  'C02FN05DML85': '1153799677',\n  'C02Y12UXJHD3': '1153799680',\n  'PF391EAA': '1153799682',\n  'B5D65H2': '1153799685',\n  'C02CV1M8ML87': '1153799688',\n  'C02DQKL9Q05D': '1153799695',\n  'C02FJ4M8ML85': '1153799699',\n  'PC1MN3C4': '1153799718',\n  'PF24ET8Y': '1153799738',\n  'FVFGK3LWQ05P': '1153799739',\n  'C02F60NXML85': '1153799742',\n  'PC151RNN': '1153799744',\n  '2FCGPF2': '1153799746',\n  'PF15QVLK': '1153799750'\n};\n  itemId = serialToIdMap[serialNumber];\n}\n\nconsole.log(`DEBUG: itemId = ${itemId}, serialNumber = ${serialNumber}`);\n\n// Rest of your parsing logic...\nlet bestResult = null;\n\nif (Array.isArray(lenovoData) && lenovoData.length > 0) {\n  bestResult = lenovoData.reduce((best, current) => {\n    const currentName = current.Name || '';\n    const bestName = best ? (best.Name || '') : '';\n    \n    if (currentName.includes('THINKPAD') || currentName.includes('IDEAPAD') || currentName.includes('YOGA')) {\n      return current;\n    }\n    \n    if (currentName.length > bestName.length) {\n      return current;\n    }\n    \n    return best || current;\n  }, null);\n} else if (lenovoData && !Array.isArray(lenovoData)) {\n  bestResult = lenovoData;\n} else {\n  return {\n    itemId,\n    serialNumber,\n    Name: 'Model Not Found',\n    error: 'No data from Lenovo API'\n  };\n}\n\n// Clean up model name\nlet modelName = bestResult.Name || 'Unknown Model';\n\nif (modelName.includes('X1 Carbon')) {\n  const carbonMatch = modelName.match(/(X1 Carbon \\d+\\w* Gen)/i);\n  if (carbonMatch) {\n    modelName = carbonMatch[1];\n  }\n} else if (modelName.includes('T490s')) {\n  modelName = 'ThinkPad T490s';\n} else if (modelName.includes('T490')) {\n  modelName = 'ThinkPad T490';\n} else if (modelName.includes('T480')) {\n  modelName = 'ThinkPad T480S';\n}\n\nmodelName = modelName\n  .replace(/[-_]/g, ' ')\n  .replace(/\\s+/g, ' ')\n  .replace(/\\s*\\(.*?\\)\\s*/g, ' ')\n  .trim();\n\nconsole.log(`Final: ${serialNumber} -> ${modelName} (Item: ${itemId})`);\n\nreturn {\n  ...bestResult,\n  itemId,\n  serialNumber,\n  Name: modelName,\n  originalName: bestResult.Name,\n  deviceProcessed: serialNumber\n};"
      },
      "id": "b45392e7-7ffd-4ac5-9cb3-b21806824f52",
      "name": "Parse Success Output1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        208
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.monday.com/v2",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mondayComApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=mutation {\n  change_multiple_column_values (\n    board_id: 2107542488,\n    item_id: \"{{$json.itemId}}\",\n    column_values: \"{\\\"text_mkw78a6r\\\": \\\"{{$json.Name}}\\\"}\"\n  ) {\n    id\n  }\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        768,
        208
      ],
      "id": "d6b5f09b-b808-467d-87c0-5441fcd004f4",
      "name": "HTTP Request",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Add this as a new Code node after HTTP Request\nconst response = $json;\nconsole.log('Monday.com response:', JSON.stringify(response, null, 2));\n\nif (response.data && response.data.change_multiple_column_values) {\n  return [{\n    json: {\n      status: \"SUCCESS\",\n      message: \"Model updated successfully\",\n      itemId: response.data.change_multiple_column_values.id\n    }\n  }];\n} else {\n  return [{\n    json: {\n      status: \"ERROR\", \n      message: \"Update may have failed\",\n      response: response\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        208
      ],
      "id": "e96912df-12ad-4bfd-9c78-2276be5c5b80",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Summary of all processed devices\nconst allExecutions = $input.all();\nconst summary = {\n  totalProcessed: allExecutions.length,\n  devices: allExecutions.map(exec => ({\n    serial: exec.json.serialNumber || 'unknown',\n    status: exec.json.status || 'unknown',\n    itemId: exec.json.itemId || 'unknown'\n  }))\n};\n\nconsole.log('=== FINAL SUMMARY ===');\nconsole.log(`Processed ${summary.totalProcessed} devices`);\nsummary.devices.forEach(device => {\n  console.log(`${device.serial}: ${device.status} (Item: ${device.itemId})`);\n});\n\nreturn [{ json: summary }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        208
      ],
      "id": "a3767b04-bb21-4de6-afec-f11e4af4a8f2",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"Invoke-WebRequest 'https://pcsupport.lenovo.com/gb/en/api/v4/mse/getproducts?productId={{ $json.serialNumber }}' | Select-Object -ExpandProperty Content | Out-String | Write-Output\"",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1392,
        928
      ],
      "id": "3a99c2b1-3d2b-45f5-b2a3-8e8fa5d99880",
      "name": "Get Model",
      "credentials": {
        "sshPassword": {
          "id": "79KNHZGwd8w288i9",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collect all items from Monday.com\nconst items = $input.all();\n\n// Build a mapping of serial number -> itemId (Lenovo only)\nconst serialToIdMap = {};\n\nfunction isLenovo(serial) {\n  if (!serial) return false;\n  if (serial.startsWith('C02') && serial.length >= 10) return false; // Apple\n  if (serial.startsWith('CND')) return false; // Dell\n  if (serial.startsWith('MP')) return false;  // Unknown\n  // Lenovo patterns\n  if (serial.match(/^(PC|PF)/)) return true;\n  if (serial.startsWith('R914')) return true;\n  if (serial.match(/^\\d+[A-Z]+$/)) return true;\n  return false;\n}\n\nitems.forEach(item => {\n  const serial = item.json.name?.trim();\n  if (serial && isLenovo(serial)) {\n    serialToIdMap[serial] = item.json.id;\n  }\n});\n\n// Log the map\nconsole.log(\"✅ Lenovo Serial → ItemId map:\", serialToIdMap);\n\n// Return the map as a single object\nreturn [\n  {\n    json: {\n      serialToIdMap,\n      totalLenovo: Object.keys(serialToIdMap).length\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -416,
        208
      ],
      "id": "16edc1c1-eaca-4c5a-8791-4c2ec49c421b",
      "name": "Build Serial→ItemId Map"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv06h76",
        "limit": 70
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        -704,
        736
      ],
      "id": "19626010-695c-4d03-a6ed-bd543e5ea789",
      "name": "Get Monday Items",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const targetSerials = [\n  'PC11AFQA', 'PF1KBWFN', 'PC18747L', 'PF1PEQXQ', 'PF13LXDK', 'PF1DDJC2', \n  'PF1SC5EZ', 'C02DQKTEQ05D', 'PF1PEQXC', 'PF1MQE1V', 'PF2RDLVD', 'PC1HBQQZ', \n  'PF1FYY9G', 'PF3B7PRH', 'PC0Y185J', 'PC0KNZ47', 'PF1M27XD', 'PC1MN3C1', \n  'PC1MN3C5', 'PC1MRL9X', 'PC11AFM5', 'PF1317SM', 'PC1LT958', 'PC0YBY3F', \n  'PF2863QC', 'PC1MN3C0', 'PC1HBRG3', 'PC101S2W', 'PC1MN3C3', 'PC13B1RK', \n  'PF1MQKAY', 'PF1SBWQ2', 'CND6420ZJS', 'PF37SHLR', 'PF2N1ZKH', 'PF37X5HN', \n  'R914EQLK', 'PF37RGE3', 'PF2RDK5Q', 'R914EQLB', 'PC151RNN', 'PF0YB9SG', \n  'PF3BGR7A', 'PF0NZNWE', 'PF3BGDJC', '20L7002CUS', 'PC0WWFKP', 'MP193DQL', \n  'R914EQLC', 'PF3B7Y3A', 'PF3B8G5L', 'PF2RDFMM', 'PF2RDLWA', 'R914EQLM', \n  'PF2RDHJT', 'PF2RDLS7', 'PF2RDK24', 'PF2RDMN1', 'PF24ET8Y', 'PF2RCDJK', \n  'PF3BGJ3Z', 'PF3B7VN4', 'PF2RDK56', 'PC1MN3C4', 'PC1MRL9W', 'PC1MN3C7', \n  'PF3117SE'\n];\n\nconst items = $input.all();\nconst itemsToProcess = [];\nconst skippedDevices = [];\nconst notFoundDevices = [];\n\nfunction getDeviceType(serial) {\n  if (serial.startsWith('C02') && serial.length >= 10) return 'Apple';\n  if (serial.startsWith('CND')) return 'Dell';\n  if (serial.match(/^(PC|PF)/)) return 'Lenovo';\n  if (serial.startsWith('R914')) return 'Lenovo';\n  if (serial.match(/^\\d+[A-Z]+$/)) return 'Lenovo';\n  if (serial.startsWith('MP')) return 'Unknown';\n  return 'Unknown';\n}\n\nconsole.log(`🔍 Processing ${targetSerials.length} target devices...`);\n\n// Create a map of all Monday.com items for faster lookup\nconst mondayItemsMap = new Map();\nitems.forEach(item => {\n  const serial = item.json.name?.trim();\n  if (serial) {\n    mondayItemsMap.set(serial, item);\n  }\n});\n\nconsole.log(`📋 Found ${mondayItemsMap.size} total items in Monday.com`);\n\n// Process each target serial\ntargetSerials.forEach(targetSerial => {\n  const item = mondayItemsMap.get(targetSerial);\n  \n  if (item) {\n    const deviceType = getDeviceType(targetSerial);\n    \n    if (deviceType === 'Lenovo') {\n      console.log(`✅ ${targetSerial} - Lenovo device (ID: ${item.json.id})`);\n      itemsToProcess.push({\n        json: {\n          itemId: item.json.id,\n          itemName: item.json.name,\n          serialNumber: targetSerial,\n          deviceType\n        }\n      });\n    } else {\n      console.log(`⏭️ ${targetSerial} - ${deviceType} device (skipped)`);\n      skippedDevices.push({\n        serial: targetSerial,\n        type: deviceType,\n        reason: 'Not Lenovo device'\n      });\n    }\n  } else {\n    console.log(`❌ ${targetSerial} - Not found in Monday.com`);\n    notFoundDevices.push(targetSerial);\n  }\n});\n\nconsole.log(`\\n📊 PROCESSING SUMMARY:`);\nconsole.log(`   ✅ Lenovo devices to process: ${itemsToProcess.length}`);\nconsole.log(`   ⏭️ Non-Lenovo devices skipped: ${skippedDevices.length}`);\nconsole.log(`   ❌ Not found in Monday.com: ${notFoundDevices.length}`);\n\nif (skippedDevices.length > 0) {\n  console.log(`\\n⏭️ SKIPPED DEVICES (Non-Lenovo):`);\n  skippedDevices.forEach(dev => console.log(`   - ${dev.serial} (${dev.type})`));\n}\n\nif (notFoundDevices.length > 0) {\n  console.log(`\\n❌ NOT FOUND IN MONDAY.COM:`);\n  notFoundDevices.forEach(serial => console.log(`   - ${serial}`));\n}\n\nif (itemsToProcess.length > 0) {\n  console.log(`\\n🚀 PROCESSING ${itemsToProcess.length} LENOVO DEVICES...`);\n  return itemsToProcess;\n} else {\n  return [{\n    json: {\n      message: \"No Lenovo devices found to process\",\n      summary: {\n        total: targetSerials.length,\n        lenovo: itemsToProcess.length,\n        skipped: skippedDevices.length,\n        notFound: notFoundDevices.length\n      },\n      skippedDevices,\n      notFoundDevices\n    }\n  }];\n}"
      },
      "id": "a19c8319-1709-40a3-a20b-cb3bdff7ab65",
      "name": "Filter Target Items",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        736
      ]
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"Invoke-WebRequest 'https://pcsupport.lenovo.com/gb/en/api/v4/mse/getproducts?productId={{ $json.serialNumber }}' | Select-Object -ExpandProperty Content | Out-String | Write-Output\"",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        -240,
        736
      ],
      "id": "e5856628-06c2-45ab-8b5d-e3fccff9303c",
      "name": "Get Model3",
      "credentials": {
        "sshPassword": {
          "id": "79KNHZGwd8w288i9",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Lenovo API response for the CURRENT device being processed\nconst lenovoData = JSON.parse($json.stdout);\n\n// Get the itemId and serialNumber from the previous node's context\nconst itemId = $('Filter Target Items').item.json.itemId;\nconst serialNumber = $('Filter Target Items').item.json.serialNumber;\n\nconsole.log(`Processing ${serialNumber} for item ${itemId}`);\nconsole.log('Lenovo response:', JSON.stringify(lenovoData, null, 2));\n\nlet bestResult = null;\n\nif (Array.isArray(lenovoData) && lenovoData.length > 0) {\n  // Find the best result - prefer ones with more descriptive names\n  bestResult = lenovoData.reduce((best, current) => {\n    const currentName = current.Name || '';\n    const bestName = best ? (best.Name || '') : '';\n    \n    // Prefer results that contain \"THINKPAD\" or other model info\n    if (currentName.includes('THINKPAD') || currentName.includes('IDEAPAD') || currentName.includes('YOGA')) {\n      return current;\n    }\n    \n    // Prefer longer, more descriptive names\n    if (currentName.length > bestName.length) {\n      return current;\n    }\n    \n    return best || current;\n  }, null);\n  \n  console.log(`Selected best result: ${bestResult.Name}`);\n  \n} else if (lenovoData && !Array.isArray(lenovoData)) {\n  bestResult = lenovoData;\n} else {\n  console.log(`No valid data from Lenovo API for ${serialNumber}`);\n  return [{\n    json: {\n      itemId,\n      serialNumber,\n      Name: 'Model Not Found',\n      error: 'No data from Lenovo API'\n    }\n  }];\n}\n\n// Clean up the model name based on the full API response\nlet modelName = bestResult.Name || 'Unknown Model';\n\n// For the detailed API responses, extract clean model names\nif (modelName.includes('X1 Carbon')) {\n  const carbonMatch = modelName.match(/(X1 Carbon \\d+\\w* Gen)/i);\n  if (carbonMatch) {\n    modelName = carbonMatch[1];\n  }\n} else if (modelName.includes('T490s')) {\n  modelName = 'ThinkPad T490s';\n} else if (modelName.includes('T490')) {\n  modelName = 'ThinkPad T490';\n} else if (modelName.includes('THINKPAD')) {\n  const thinkpadMatch = modelName.match(/THINKPAD[^.]*(?:-TYPE-[^.]*)?/i);\n  if (thinkpadMatch) {\n    modelName = thinkpadMatch[0].replace(/-TYPE-.*/, '').replace(/-/g, ' ');\n  }\n} else if (modelName.includes('IDEAPAD')) {\n  const ideapadMatch = modelName.match(/IDEAPAD[^.]*/i);\n  if (ideapadMatch) {\n    modelName = ideapadMatch[0].replace(/-/g, ' ');\n  }\n} else if (modelName.includes('YOGA')) {\n  const yogaMatch = modelName.match(/YOGA[^.]*/i);\n  if (yogaMatch) {\n    modelName = yogaMatch[0].replace(/-/g, ' ');\n  }\n}\n\n// Clean up formatting\nmodelName = modelName\n  .replace(/[-_]/g, ' ')\n  .replace(/\\s+/g, ' ')\n  .replace(/\\s*\\(.*?\\)\\s*/g, ' ') // Remove parenthetical info\n  .trim();\n\nconsole.log(`Final model name for ${serialNumber}: \"${modelName}\"`);\n\nreturn [{\n  json: {\n    ...bestResult,\n    itemId,\n    serialNumber,\n    Name: modelName,\n    originalName: bestResult.Name,\n    deviceProcessed: serialNumber\n  }\n}];"
      },
      "id": "20a4af76-0580-44a8-a5b7-37a1f38ab4da",
      "name": "Parse Success Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        736
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.monday.com/v2",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mondayComApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ \n  `mutation {\n    change_multiple_column_values (\n      board_id: 2107542488,\n      item_id: ${$json.itemId},\n      column_values: \"${JSON.stringify({ \"text_mkw78a6r\": $json.Name }).replace(/\"/g, '\\\\\"')}\"\n    ) {\n      id\n    }\n  }`\n}}\n"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        336,
        736
      ],
      "id": "a30bc04a-a67f-4ea7-9d3d-12394632d849",
      "name": "HTTP Request1",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Add this as a new Code node after HTTP Request\nconst response = $json;\nconsole.log('Monday.com response:', JSON.stringify(response, null, 2));\n\nif (response.data && response.data.change_multiple_column_values) {\n  return [{\n    json: {\n      status: \"SUCCESS\",\n      message: \"Model updated successfully\",\n      itemId: response.data.change_multiple_column_values.id\n    }\n  }];\n} else {\n  return [{\n    json: {\n      status: \"ERROR\", \n      message: \"Update may have failed\",\n      response: response\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        736
      ],
      "id": "d9bc09f7-738b-481e-ba48-3e28fd57cdd2",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "jsCode": "// Summary of all processed devices\nconst allExecutions = $input.all();\nconst summary = {\n  totalProcessed: allExecutions.length,\n  devices: allExecutions.map(exec => ({\n    serial: exec.json.serialNumber || 'unknown',\n    status: exec.json.status || 'unknown',\n    itemId: exec.json.itemId || 'unknown'\n  }))\n};\n\nconsole.log('=== FINAL SUMMARY ===');\nconsole.log(`Processed ${summary.totalProcessed} devices`);\nsummary.devices.forEach(device => {\n  console.log(`${device.serial}: ${device.status} (Item: ${device.itemId})`);\n});\n\nreturn [{ json: summary }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        768,
        736
      ],
      "id": "4b49fc04-dd3c-435d-a13c-1c5e95465cdb",
      "name": "Code in JavaScript3"
    }
  ],
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Get Monday Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items1": {
      "main": [
        [
          {
            "node": "Build Serial→ItemId Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items1": {
      "main": [
        [
          {
            "node": "Get Model2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model2": {
      "main": [
        [
          {
            "node": "Parse Success Output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Serial→ItemId Map": {
      "main": [
        [
          {
            "node": "Filter Target Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items": {
      "main": [
        [
          {
            "node": "Filter Target Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items": {
      "main": [
        [
          {
            "node": "Get Model3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model3": {
      "main": [
        [
          {
            "node": "Parse Success Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Code in JavaScript3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Jerusalem",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "e00de647-0d56-4755-965f-47bf937bf504",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-28T16:51:52.916Z",
      "updatedAt": "2025-09-28T16:51:52.916Z",
      "role": "workflow:owner",
      "workflowId": "WvXu0pxOgmwwtlqd",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}