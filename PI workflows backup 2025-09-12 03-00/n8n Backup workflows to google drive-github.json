{
  "createdAt": "2025-08-31T19:35:34.809Z",
  "updatedAt": "2025-09-01T16:09:14.000Z",
  "id": "lIAp2PZeA0MG7QiE",
  "name": "n8n Backup workflows to google drive/github",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2160,
        176
      ],
      "id": "f0457b8e-50d0-41b3-8099-356080bdc39f",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "=PI workflows backup_{{$now.setZone(\"Asia/Jerusalem\").toFormat(\"yyyy-MM-dd HH:mm\")}}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2368,
        -144
      ],
      "id": "5e9f0818-cfa4-4580-b087-6787d410974b",
      "name": "Create folder",
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "8jPddclvHRq47Uxw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "name": "=",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $items(\"Create folder\")[0].json[\"id\"] }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -560,
        -160
      ],
      "id": "c1a52f79-ea78-4bec-9927-798448978350",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "8jPddclvHRq47Uxw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "filters": {
          "activeWorkflows": true
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        -2016,
        -144
      ],
      "id": "a7527956-b564-412f-a44f-ccdff9420db9",
      "name": "Get many workflows",
      "credentials": {
        "n8nApi": {
          "id": "ZHgimZOuF3ek1ori",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1584,
        -144
      ],
      "id": "b72fbae4-e781-4744-9e5a-3e8bd480557a",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "PI workflows backup",
        "returnAll": true,
        "filter": {},
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3136,
        -144
      ],
      "id": "8ba6a0c6-6618-4f49-b88a-0850956d2ee9",
      "name": "Search files and folders",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "8jPddclvHRq47Uxw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "folder",
        "operation": "deleteFolder",
        "folderNoRootId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2736,
        -144
      ],
      "id": "c801649b-53b5-49ad-a0a1-85e75fd137e6",
      "name": "Delete folder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "8jPddclvHRq47Uxw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const name = $json.name || 'workflow-backup';\nconst filename = name + '.json';\nconst fileContent = JSON.stringify($json, null, 2);\n\nreturn {\n  json: { name: name },\n  binary: {\n    data: {\n      data: Buffer.from(fileContent).toString('base64'),\n      mimeType: 'application/json',\n      fileName: filename\n    }\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        -160
      ],
      "id": "015003a4-e280-4d64-b506-5bc98eef761d",
      "name": "workflow Export"
    },
    {
      "parameters": {
        "jsCode": "// Collect all workflow names that were just backed up\nconst normalizeItems = $items('Normalize Filename1') || [];\nconst workflowNames = normalizeItems\n  .map(item => item.json?.workflowName || item.binary?.data?.fileName || 'Unknown Workflow')\n  .filter(name => name && name !== 'Unknown Workflow');\n\n// Pass the names to the next node\nreturn [{ json: { backedUpWorkflows: workflowNames } }];\n"
      },
      "id": "3aa6d8c8-3a1c-443f-9c80-12d29587da68",
      "name": "Collect Workflow Names",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -128,
        432
      ]
    },
    {
      "parameters": {
        "jsCode": "const tz = \"Asia/Jerusalem\";\nconst dt = $now.setZone(tz);\n\nconst dateStr = dt.toFormat(\"yyyy-MM-dd\");\nconst timeHM = dt.toFormat(\"HH-mm\");\nconst timestamp = dt.toFormat(\"yyyy-MM-dd HH:mm\");\n\n// Attempt to collect workflow names\nlet workflowNames = [];\n\ntry {\n  // Prefer names from Normalize Filename1\n  const normalizedItems = $items('Normalize Filename1');\n  if (normalizedItems?.length > 0) {\n    workflowNames = normalizedItems\n      .map(item => item.json?.workflowName || item.json?.name || 'Unknown')\n      .filter((name, idx, arr) => name !== 'Unknown' && arr.indexOf(name) === idx);\n  }\n\n  // Fallback: GitHub Backup\n  if (workflowNames.length === 0) {\n    const backupItems = $items('GitHub Backup (sanitized)1');\n    if (backupItems?.length > 0) {\n      workflowNames = backupItems\n        .map(item => item.json?.name || 'Unknown')\n        .filter((name, idx, arr) => name !== 'Unknown' && arr.indexOf(name) === idx);\n    }\n  }\n\n} catch (e) {\n  console.log('Error collecting workflow names:', e.message);\n  try {\n    // Final fallback: use all input\n    const allItems = $input.all() || [];\n    workflowNames = allItems\n      .map(item => item.json?.workflowName || item.json?.name || 'Unknown')\n      .filter((name, idx, arr) => name !== 'Unknown' && arr.indexOf(name) === idx);\n  } catch (fallbackError) {\n    console.log('Final fallback failed:', fallbackError.message);\n  }\n}\n\n// GitHub backup info\nconst OWNER = \"alexxx55555\";\nconst REPO  = \"n8n-Raspberry-PI-Workflow-Backup\";  // âœ… Correct repo name\nconst BRANCH = \"main\";\nconst folder = `PI workflows backup ${dateStr} ${timeHM}`;\n\n// Encode all dynamic path parts\nconst ghUrl = `https://github.com/${OWNER}/${encodeURIComponent(REPO)}/tree/${encodeURIComponent(BRANCH)}/${encodeURIComponent(folder)}`;\n\n// Markdown README content\nconst readme = `# n8n-Raspberry-PI-Workflow-Backup\n\n## Latest Backup: ${timestamp}\n\n### Backup URL\n${ghUrl}\n\n### Workflows Backed Up (${workflowNames.length} total)\n${workflowNames.length ? workflowNames.map(n => `- ${n}`).join(\"\\n\") : \"- (no workflows found)\"}\n\n---\n*Backup generated automatically by n8n*`;\n\n// Output\nreturn [{\n  json: {\n    readme,\n    timestamp,\n    folder,\n    ghUrl,\n    workflowCount: workflowNames.length\n  }\n}];\n"
      },
      "id": "dc2e4d6c-f88c-4ca3-824d-be33b0963dae",
      "name": "Create README Text",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        1248
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": "alexxx55555",
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        },
        "filePath": "README.md",
        "additionalParameters": {}
      },
      "id": "9c095cdc-bd0c-4c5c-bc4c-03c2874fc971",
      "name": "GitHub Get README",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        1904,
        1248
      ],
      "webhookId": "976c9847-715d-4eac-8686-4d65d58fddff",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const text = ($json.readme || '# PI workflows backup\\n\\n(empty)')\n  .replace(/\\r?\\n/g, '\\n');\n\nconst getReadmeItem = $item(0, 'GitHub Get README');\nconst sha = getReadmeItem?.json?.sha || '';\n\nreturn {\n  json: { sha },\n  binary: {\n    data: {\n      data: Buffer.from(text, 'utf8').toString('base64'),\n      fileName: 'README.md',\n      mimeType: 'text/markdown'\n    }\n  }\n};"
      },
      "id": "f7401952-6e8c-4587-9a14-24cc91b7e241",
      "name": "Make README Binary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2864,
        1248
      ]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "leftValue": "={{$node[\"GitHub Get README\"].item}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "greater"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "f3bb5f80-dc32-4e3f-925a-3253871e03a5",
      "name": "IF README exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2544,
        1248
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "owner": "alexxx55555",
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        },
        "filePath": "README.md",
        "binaryData": true,
        "commitMessage": "Create README with latest backup summary"
      },
      "id": "f93f5e5c-26e8-4a87-8752-720faeb2aaf6",
      "name": "GitHub Create README (binary)",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        3088,
        912
      ],
      "webhookId": "4d2b8cab-bb0e-4e4f-a303-2cd86eb3f482",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": "alexxx55555",
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        },
        "filePath": "README.md",
        "binaryData": true,
        "commitMessage": "Update README with latest backup summary"
      },
      "id": "6ca10f5e-7215-4360-a9c2-4fff2a94d73a",
      "name": "GitHub Edit README (binary)",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        2896,
        704
      ],
      "webhookId": "327e766f-55b5-4285-b308-498138c7521b",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $items().map((item) => {\n  const json = item.json || {};\n  const bin  = item.binary || {};\n  const data = bin.data || {};\n\n  const orig = (data.fileName || (json.name ? json.name + '.json' : 'workflow.json')).toString();\n\n  // sanitize: no slashes â†’ no nested folders; collapse whitespace\n  const safe = orig\n    .replace(/[\\/\\\\]+/g, '-')    // replace / or \\ with -\n    .replace(/\\s+/g, ' ')\n    .trim();\n\n  // set sanitized filename\n  bin.data = Object.assign({}, data, { fileName: safe });\n\n  // Store workflow name in json for README generation\n  json.workflowName = json.name || safe.replace('.json', '');\n\n  return { json, binary: bin };\n});\n"
      },
      "id": "6e4b41fe-acb9-485e-b5e4-1a791042dbc8",
      "name": "Normalize Filename1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        432
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "alexxx55555",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        },
        "filePath": "=PI workflows backup {{$now.setZone(\"Asia/Jerusalem\").toFormat(\"yyyy-MM-dd HH-mm\")}}/{{$binary.data.fileName}}",
        "binaryData": true,
        "commitMessage": "=PI workflows backup: {{$json.name}} - {{$now.setZone(\"Asia/Jerusalem\").toFormat(\"yyyy-MM-dd HH:mm\")}}",
        "additionalParameters": {
          "author": {
            "name": "PI workflows backup",
            "email": "vinokura@alex-it.net"
          }
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        -528,
        640
      ],
      "id": "2b6c9f73-4454-401a-ad9e-a72343850be1",
      "name": "GitHub Backup (sanitized)1",
      "webhookId": "e533a661-fea4-4243-8df3-c8400cbb80f1",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "owner": "alexxx55555",
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        }
      },
      "id": "4a75d6fc-b9f5-4d6a-b0a7-ed443d21fe12",
      "name": "GitHub List Backup Folders (root)1",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        32,
        640
      ],
      "webhookId": "8d0653eb-ecf7-4341-8e77-74e221755ff7",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Keep ONLY the folder we just wrote to; delete all others.\nconst tz = \"Asia/Jerusalem\";\nconst currentName = `PI workflows backup ${$now.setZone(tz).toFormat(\"yyyy-MM-dd HH-mm\")}`;\n\nconst folders = $items().filter(i =>\n  i.json &&\n  i.json.type === \"dir\" &&\n  typeof i.json.name === \"string\" &&\n  i.json.name.startsWith(\"PI workflows backup \")\n);\n\n// Output ONLY the older folders (everything except the one we just made)\nreturn folders\n  .filter(i => i.json.name !== currentName)\n  .map(i => ({ json: { path: i.json.path, name: i.json.name } }));\n"
      },
      "id": "25ebc08c-95b1-4cf9-bcda-4b54a8b7c322",
      "name": "Filter Old GH Backup Folders (keep newest)1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        640
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "owner": "alexxx55555",
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        },
        "filePath": "={{$json.path}}"
      },
      "id": "47568852-7118-40ed-ad1c-acefff10d608",
      "name": "GH List Files In Old Folder1",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        768,
        640
      ],
      "webhookId": "49ccb808-35ee-4453-9e48-6b71cc7da4fd",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{$json[\"type\"]}}",
              "rightValue": "file",
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "id": "isfile"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5bce96a3-6471-4931-a350-65f2192272af",
      "name": "IF Is File?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        784,
        1312
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "list",
        "owner": "alexxx55555",
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        },
        "filePath": "={{$json.path}}"
      },
      "id": "334ff97d-f595-4e55-bfc0-c81733aee390",
      "name": "GH List Files In Subfolder1",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        784,
        1120
      ],
      "webhookId": "ee5a437b-36ea-4187-8250-380e17574093",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $items().filter(i=>i.json&&i.json.type==='file'&&i.json.path&&i.json.sha).map(i=>({json:{path:i.json.path,sha:i.json.sha}}));"
      },
      "id": "96a4f5ac-c38a-4dc6-b98e-0ba6238393a5",
      "name": "To Files (root)1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        1376
      ]
    },
    {
      "parameters": {
        "jsCode": "return $items().filter(i=>i.json&&i.json.type==='file'&&i.json.path&&i.json.sha).map(i=>({json:{path:i.json.path,sha:i.json.sha}}));"
      },
      "id": "16c448e1-490e-415b-a9be-cd24a69b21d3",
      "name": "To Files (subfolder)1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        1120
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "delete",
        "owner": "alexxx55555",
        "repository": {
          "__rl": true,
          "value": "n8n-Raspberry-PI-Workflow-Backup",
          "mode": "list",
          "cachedResultName": "n8n-Raspberry-PI-Workflow-Backup",
          "cachedResultUrl": "https://github.com/alexxx55555/n8n-Raspberry-PI-Workflow-Backup"
        },
        "filePath": "={{$json.path}}",
        "commitMessage": "=Cleanup old backup file {{$json.path}}"
      },
      "id": "147e846b-7f0a-4995-9ece-face4728390a",
      "name": "GH Delete File1",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        1296,
        1248
      ],
      "webhookId": "4335414b-45d6-4334-9a77-13aebaa9a888",
      "credentials": {
        "githubApi": {
          "id": "A8VxApqWkWn0Bbxk",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "=PI workflows backup",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "mode": "list",
          "value": "root",
          "cachedResultName": "/ (Root folder)"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1568,
        176
      ],
      "id": "3c2ce9a3-59ab-4e66-aff5-b8d281755e83",
      "name": "Create folder if not exist",
      "executeOnce": true,
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "8jPddclvHRq47Uxw",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dt = $now.setZone('Asia/Jerusalem');\n\nreturn [{\n  json: {\n    raw: $now.toISO(),                      // Original timestamp\n    local: dt.toISO(),                      // Converted to Israel\n    date: dt.toFormat('yyyy-MM-dd'),        // Formatted date\n    time: dt.toFormat('HH:mm:ss'),          // Formatted time\n    zone: dt.zoneName                       // Should be Asia/Jerusalem\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1872,
        176
      ],
      "id": "0611cd29-3bc8-48af-a549-fa502b395ceb",
      "name": "Set IL time"
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Set IL time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create folder": {
      "main": [
        [
          {
            "node": "Get many workflows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many workflows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "workflow Export",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search files and folders": {
      "main": [
        [
          {
            "node": "Delete folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete folder": {
      "main": [
        [
          {
            "node": "Create folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "workflow Export": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          },
          {
            "node": "Normalize Filename1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create README Text": {
      "main": [
        [
          {
            "node": "GitHub Get README",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Get README": {
      "main": [
        [
          {
            "node": "Make README Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make README Binary": {
      "main": [
        [
          {
            "node": "IF README exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF README exists?": {
      "main": [
        [
          {
            "node": "GitHub Edit README (binary)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GitHub Create README (binary)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Filename1": {
      "main": [
        [
          {
            "node": "GitHub Backup (sanitized)1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Collect Workflow Names",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub Backup (sanitized)1": {
      "main": [
        [
          {
            "node": "GitHub List Backup Folders (root)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub List Backup Folders (root)1": {
      "main": [
        [
          {
            "node": "Filter Old GH Backup Folders (keep newest)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Old GH Backup Folders (keep newest)1": {
      "main": [
        [
          {
            "node": "GH List Files In Old Folder1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GH List Files In Old Folder1": {
      "main": [
        [
          {
            "node": "IF Is File?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Is File?1": {
      "main": [
        [
          {
            "node": "To Files (root)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GH List Files In Subfolder1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GH List Files In Subfolder1": {
      "main": [
        [
          {
            "node": "To Files (subfolder)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To Files (root)1": {
      "main": [
        [
          {
            "node": "GH Delete File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "To Files (subfolder)1": {
      "main": [
        [
          {
            "node": "GH Delete File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GH Delete File1": {
      "main": [
        [
          {
            "node": "Create README Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create folder if not exist": {
      "main": [
        [
          {
            "node": "Search files and folders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set IL time": {
      "main": [
        [
          {
            "node": "Create folder if not exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": [
        20
      ]
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "8929c230-ac66-44c7-89c2-0d728d7d47da",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-08-31T19:35:34.815Z",
      "updatedAt": "2025-08-31T19:35:34.815Z",
      "role": "workflow:owner",
      "workflowId": "lIAp2PZeA0MG7QiE",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}