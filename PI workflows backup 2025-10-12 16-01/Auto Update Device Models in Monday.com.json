{
  "createdAt": "2025-09-28T16:51:52.912Z",
  "updatedAt": "2025-10-12T12:30:44.000Z",
  "id": "WvXu0pxOgmwwtlqd",
  "name": "Auto Update Device Models in Monday.com",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1568,
        -256
      ],
      "id": "39d5281a-e235-4d27-84fe-082fdd4bbd96",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv04x7h",
        "returnAll": true
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        -1312,
        -336
      ],
      "id": "becf5501-6c15-4089-9968-2a3e1d3b26a4",
      "name": "Get Monday Items Lenovo",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv0cxcb",
        "returnAll": true
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        -1312,
        -128
      ],
      "id": "d362a807-cef9-4298-a653-b362ecfc440b",
      "name": "Get Monday Items Mac",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const targetSerials = [\n  'PG02VQ9C',\n  'PG02VQ9G',\n  'PG02VQ9T',\n  'PG02VQA8',\n  'PG02YJ51',\n  'PG02YJ4G',\n  'PG02VQAP',\n  'PG02YJEC',\n  'PG02VQB6',\n  'PG02YJDP'\n];\n\nconst itemsToProcess = [];\nconst skippedDevices = [];\nconst notFoundDevices = [];\n\nfunction getDeviceType(serial) {\n  if (serial.startsWith('C02') && serial.length >= 10) return 'Apple';\n  if (serial.startsWith('CND')) return 'Dell';\n  if (serial.match(/^(PC|PF|PG|MP|R)/)) return 'Lenovo';\n  if (serial.match(/^\\d+[A-Z]+$/)) return 'Lenovo';\n  if (serial.startsWith('MP')) return 'Unknown';\n  return 'Unknown';\n}\n\nconsole.log(`🔍 Processing ${targetSerials.length} target devices...`);\n\nconst mondayItemsMap = new Map();\nitems.forEach(item => {\n  const serial = item.json.name?.trim();\n  if (serial) {\n    mondayItemsMap.set(serial, item);\n  }\n});\n\nconsole.log(`📋 Found ${mondayItemsMap.size} total items in Monday.com`);\n\ntargetSerials.forEach(targetSerial => {\n  const item = mondayItemsMap.get(targetSerial);\n\n  if (item) {\n    const deviceType = getDeviceType(targetSerial);\n\n    if (deviceType === 'Lenovo') {\n      console.log(`✅ ${targetSerial} - Lenovo device (ID: ${item.json.id})`);\n      itemsToProcess.push({\n        json: {\n          itemId: item.json.id,\n          itemName: item.json.name,\n          serialNumber: targetSerial,\n          deviceType\n        }\n      });\n    } else {\n      console.log(`⏭️ ${targetSerial} - ${deviceType} device (skipped)`);\n      skippedDevices.push({\n        serial: targetSerial,\n        type: deviceType,\n        reason: 'Not Lenovo device'\n      });\n    }\n  } else {\n    console.log(`❌ ${targetSerial} - Not found in Monday.com`);\n    notFoundDevices.push(targetSerial);\n  }\n});\n\nconsole.log(`\\n📊 PROCESSING SUMMARY:`);\nconsole.log(`   ✅ Lenovo devices to process: ${itemsToProcess.length}`);\nconsole.log(`   ⏭️ Non-Lenovo devices skipped: ${skippedDevices.length}`);\nconsole.log(`   ❌ Not found in Monday.com: ${notFoundDevices.length}`);\n\nif (skippedDevices.length > 0) {\n  console.log(`\\n⏭️ SKIPPED DEVICES (Non-Lenovo):`);\n  skippedDevices.forEach(dev => console.log(`   - ${dev.serial} (${dev.type})`));\n}\n\nif (notFoundDevices.length > 0) {\n  console.log(`\\n❌ NOT FOUND IN MONDAY.COM:`);\n  notFoundDevices.forEach(serial => console.log(`   - ${serial}`));\n}\n\nif (itemsToProcess.length > 0) {\n  console.log(`\\n🚀 PROCESSING ${itemsToProcess.length} LENOVO DEVICES...`);\n  return itemsToProcess;\n} else {\n  return [{\n    json: {\n      message: \"No Lenovo devices found to process\",\n      summary: {\n        total: targetSerials.length,\n        lenovo: itemsToProcess.length,\n        skipped: skippedDevices.length,\n        notFound: notFoundDevices.length\n      },\n      skippedDevices,\n      notFoundDevices\n    }\n  }];\n}\n"
      },
      "id": "107da51d-510f-4a7c-b360-25718fdbad3f",
      "name": "Filter Target Items Lenovo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        -336
      ]
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"Invoke-WebRequest 'https://pcsupport.lenovo.com/gb/en/api/v4/mse/getproducts?productId={{ $json.serialNumber }}' | Select-Object -ExpandProperty Content | Out-String | Write-Output\"",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        -560,
        -336
      ],
      "id": "cc84a9f1-436f-451c-8aca-0fbd6dca422f",
      "name": "Get Model Lenovo",
      "credentials": {
        "sshPassword": {
          "id": "TrReRPqJQXNQceVu",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse Lenovo API response\nconst lenovoData = JSON.parse($json.stdout);\n\n// Get the itemId and serialNumber from Filter Target Items1 node\nconst itemId = $('Filter Target Items Lenovo').item.json.itemId;\nconst serialNumber = $('Filter Target Items Lenovo').item.json.serialNumber;\n\nconsole.log(`Processing ${serialNumber} for item ${itemId}`);\n\nlet bestResult = null;\n\nif (Array.isArray(lenovoData) && lenovoData.length > 0) {\n  bestResult = lenovoData.reduce((best, current) => {\n    const currentName = current.Name || '';\n    const bestName = best ? (best.Name || '') : '';\n    \n    if (currentName.includes('THINKPAD') || currentName.includes('IDEAPAD') || currentName.includes('YOGA')) {\n      return current;\n    }\n    \n    if (currentName.length > bestName.length) {\n      return current;\n    }\n    \n    return best || current;\n  }, null);\n  \n} else if (lenovoData && !Array.isArray(lenovoData)) {\n  bestResult = lenovoData;\n} else {\n  console.log(`No valid data from Lenovo API for ${serialNumber}`);\n  return {\n    itemId,\n    serialNumber,\n    Name: 'Model Not Found',\n    error: 'No data from Lenovo API'\n  };\n}\n\n// Clean up model name\nlet modelName = bestResult.Name || 'Unknown Model';\n\nif (modelName.includes('X1 Carbon')) {\n  const carbonMatch = modelName.match(/(X1 Carbon \\d+\\w* Gen)/i);\n  if (carbonMatch) modelName = carbonMatch[1];\n} else if (modelName.includes('T490s')) {\n  modelName = 'ThinkPad T490s';\n} else if (modelName.includes('T490')) {\n  modelName = 'ThinkPad T490';\n} else if (modelName.includes('T480')) {\n  modelName = 'ThinkPad T480s';\n}\n\nmodelName = modelName\n  .replace(/[-_]/g, ' ')\n  .replace(/\\s+/g, ' ')\n  .replace(/\\s*\\(.*?\\)\\s*/g, ' ')\n  .trim();\n\nconsole.log(`Final: ${serialNumber} -> \"${modelName}\" (Item: ${itemId})`);\n\nreturn {\n  itemId,\n  serialNumber,\n  Name: modelName\n};"
      },
      "id": "b45392e7-7ffd-4ac5-9cb3-b21806824f52",
      "name": "Parse Success Output Lenovo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -288,
        -336
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.monday.com/v2",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mondayComApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=mutation {\n  change_multiple_column_values (\n    board_id: 2107542488,\n    item_id: {{$json.itemId}},\n    column_values: \"{\\\"text_mkw78a6r\\\": \\\"{{$json.Name}}\\\"}\"\n  ) {\n    id\n  }\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        -336
      ],
      "id": "d6b5f09b-b808-467d-87c0-5441fcd004f4",
      "name": "HTTP Request Lenovo",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Add this as a new Code node after HTTP Request\nconst response = $json;\nconsole.log('Monday.com response:', JSON.stringify(response, null, 2));\n\nif (response.data && response.data.change_multiple_column_values) {\n  return [{\n    json: {\n      status: \"SUCCESS\",\n      message: \"Model updated successfully\",\n      itemId: response.data.change_multiple_column_values.id\n    }\n  }];\n} else {\n  return [{\n    json: {\n      status: \"ERROR\", \n      message: \"Update may have failed\",\n      response: response\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -336
      ],
      "id": "e96912df-12ad-4bfd-9c78-2276be5c5b80",
      "name": "Check Update Status Lenovo"
    },
    {
      "parameters": {
        "jsCode": "// Summary of all processed devices\nconst allExecutions = $input.all();\nconst summary = {\n  totalProcessed: allExecutions.length,\n  devices: allExecutions.map(exec => ({\n    serial: exec.json.serialNumber || 'unknown',\n    status: exec.json.status || 'unknown',\n    itemId: exec.json.itemId || 'unknown'\n  }))\n};\n\nconsole.log('=== FINAL SUMMARY ===');\nconsole.log(`Processed ${summary.totalProcessed} devices`);\nsummary.devices.forEach(device => {\n  console.log(`${device.serial}: ${device.status} (Item: ${device.itemId})`);\n});\n\nreturn [{ json: summary }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        -336
      ],
      "id": "a3767b04-bb21-4de6-afec-f11e4af4a8f2",
      "name": "Final Summary Lenovo"
    },
    {
      "parameters": {
        "jsCode": "// List of target serials to match\nconst targetSerials = [\n  'FVFG11FDQ05P',\n  'C02F32RCML85',\n  'FVFFG3FXQ05P',\n  'FVFG802VQ05P',\n  'C02CV1M8ML87',\n  'FVFGK3LWQ05P',\n  'FVFG11FTQ05P',\n  'FVFG11FAQ05P',\n  'FVFXQ11SHV2H',\n  'FVFG140CQ05P',\n  'FVFFD99KQ05D',\n  'C02Y73D1JHD2',\n  'C02ZP209LVDM',\n  'VQH07WM6WT',\n  'C02C81GULVDM',\n  'C02FD669ML7H',\n  'C02Z4269LVDM'\n];\n\n// Input data from Monday.com\nconst items = $input.all();\nconst itemsToProcess = [];\nconst skippedDevices = [];\nconst notFoundDevices = [];\n\n// --- Device Type Detection ---\nfunction getDeviceType(serial) {\n  const upper = serial.toUpperCase();\n\n  // Apple serials are 10–12 alphanumeric characters, no spaces or symbols\n  if (/^[A-Z0-9]{10,12}$/.test(upper)) return 'Apple';\n\n  // Dell\n  if (upper.startsWith('CND')) return 'Dell';\n\n  // Lenovo\n  if (/^(PC|PF)/.test(upper)) return 'Lenovo';\n  if (upper.startsWith('R914') || upper.startsWith('R911')) return 'Lenovo';\n\n  return 'Unknown';\n}\n\n// --- Start Processing ---\nconsole.log(`🔍 Processing ${targetSerials.length} target devices...`);\n\n// Create a normalized lookup map from Monday.com items\nconst mondayItemsMap = new Map();\nitems.forEach(item => {\n  const serial = item.json.name?.trim().toUpperCase();\n  if (serial) mondayItemsMap.set(serial, item);\n});\n\nconsole.log(`📋 Found ${mondayItemsMap.size} total items in Monday.com`);\n\n// Compare and process\ntargetSerials.forEach(serial => {\n  const upperSerial = serial.toUpperCase();\n  const item = mondayItemsMap.get(upperSerial);\n\n  if (item) {\n    const deviceType = getDeviceType(upperSerial);\n\n    if (deviceType === 'Apple') {\n      console.log(`✅ ${upperSerial} - Apple device (ID: ${item.json.id})`);\n      itemsToProcess.push({\n        json: {\n          itemId: item.json.id,\n          itemName: item.json.name,\n          serialNumber: upperSerial,\n          deviceType\n        }\n      });\n    } else {\n      console.log(`⏭️ ${upperSerial} - ${deviceType} device (skipped)`);\n      skippedDevices.push({\n        serial: upperSerial,\n        type: deviceType,\n        reason: 'Not Apple device'\n      });\n    }\n  } else {\n    console.log(`❌ ${upperSerial} - Not found in Monday.com`);\n    notFoundDevices.push(upperSerial);\n  }\n});\n\n// --- Summary ---\nconsole.log(`\\n📊 PROCESSING SUMMARY:`);\nconsole.log(`   ✅ Apple devices to process: ${itemsToProcess.length}`);\nconsole.log(`   ⏭️ Non-Apple devices skipped: ${skippedDevices.length}`);\nconsole.log(`   ❌ Not found in Monday.com: ${notFoundDevices.length}`);\n\nif (skippedDevices.length > 0) {\n  console.log(`\\n⏭️ SKIPPED DEVICES:`);\n  skippedDevices.forEach(d => console.log(`   - ${d.serial} (${d.type})`));\n}\n\nif (notFoundDevices.length > 0) {\n  console.log(`\\n❌ NOT FOUND IN MONDAY.COM:`);\n  notFoundDevices.forEach(s => console.log(`   - ${s}`));\n}\n\n// --- Output ---\nif (itemsToProcess.length > 0) {\n  console.log(`\\n🚀 PROCESSING ${itemsToProcess.length} APPLE DEVICES...`);\n  return itemsToProcess;\n} else {\n  return [{\n    json: {\n      message: \"No Apple devices found to process\",\n      summary: {\n        total: targetSerials.length,\n        apple: itemsToProcess.length,\n        skipped: skippedDevices.length,\n        notFound: notFoundDevices.length\n      },\n      skippedDevices,\n      notFoundDevices\n    }\n  }];\n}\n"
      },
      "id": "eae8b543-21fc-4b8c-aab7-c2dc3cae104c",
      "name": "Filter Target Items Mac",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        -128
      ]
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"$serial = '{{ $json.serialNumber }}'; $cc = $serial.Substring($serial.Length - 4); Invoke-WebRequest \\\"https://support-sp.apple.com/sp/product?cc=$cc\\\" | Select-Object -ExpandProperty Content | Out-String | Write-Output\"",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        -560,
        -128
      ],
      "id": "9efe713f-e6e1-4f44-bd98-4c39e7e51420",
      "name": "Get Model Mac",
      "credentials": {
        "sshPassword": {
          "id": "TrReRPqJQXNQceVu",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse Apple API response\nlet rawResponse = $json.stdout;\n\nconst itemId = $('Filter Target Items Mac').item.json.itemId;\nconst serialNumber = $('Filter Target Items Mac').item.json.serialNumber;\n\nconsole.log(`Processing ${serialNumber} for item ${itemId}`);\n\nlet modelName = 'Mac'; // Default fallback\n\n// Helper function to determine model from serial number patterns\nfunction getModelFromSerial(serial) {\n  if (!serial) return 'Mac';\n  \n  const upper = serial.toUpperCase();\n  \n  // Get last 4 characters (model identifier)\n  const modelCode = upper.substring(upper.length - 4);\n  \n  // Common MacBook Air identifiers\n  const airCodes = [\n    '7H5G', 'FXQ0', '2VQ0', 'LWQ0', 'FAQ0', 'Q05P', 'SHV2', '40CQ',\n    '99KQ', 'PQWN', 'C5ML', 'QXTR', 'M072', '6K1', 'BXQ0', 'PL4M',\n    'NHJ', 'MQ1J', 'NY67', 'LVFP', 'XNKP', 'YMQF', 'X63C', 'M6KQ',\n    '0CQ0'\n  ];\n  \n  // Common MacBook Pro identifiers (12-char serials typically Pro)\n  const proCodes = [\n    'MD6M', 'ML85', 'ML87', 'ML7H', 'Q05D', 'JHD2', 'HV29', 'LVDG',\n    'LVCJ', 'LVDL', 'P3Y1', 'HV2V', 'HV2Q', 'LVDC', 'JHCD', 'HV2D',\n    'LVDM', 'WT'\n  ];\n  \n  // Check against known patterns\n  if (airCodes.includes(modelCode)) {\n    return 'MacBook Air';\n  }\n  \n  if (proCodes.includes(modelCode)) {\n    return 'MacBook Pro';\n  }\n  \n  // Fallback patterns based on serial structure\n  // 12-character serials (C02...) are typically MacBook Pro\n  if (upper.startsWith('C02') && upper.length === 12) {\n    return 'MacBook Pro';\n  }\n  \n  // 10-character serials starting with FV are typically MacBook Air\n  if (upper.startsWith('FV') && upper.length === 12) {\n    return 'MacBook Air';\n  }\n  \n  // VQH prefix is often MacBook Pro\n  if (upper.startsWith('VQH')) {\n    return 'MacBook Pro';\n  }\n  \n  // Default fallback\n  return 'Mac';\n}\n\n// Check if response is ASCII codes or direct text\nlet xmlText = '';\n\nif (rawResponse.includes('\\r\\n') && !rawResponse.includes('<')) {\n  // PowerShell returned ASCII codes - convert them\n  console.log('Converting ASCII codes to text...');\n  const asciiCodes = rawResponse.split('\\r\\n').filter(code => code.trim() !== '');\n  xmlText = asciiCodes.map(code => String.fromCharCode(parseInt(code))).join('');\n} else {\n  // Direct text response\n  xmlText = rawResponse;\n}\n\nconsole.log('XML Response (first 500 chars):', xmlText.substring(0, 500));\n\n// Check if response is HTML (error page)\nif (xmlText.includes('<!DOCTYPE html>') || xmlText.includes('<html')) {\n  console.log(`Received HTML instead of XML - trying to determine model from serial`);\n  modelName = getModelFromSerial(serialNumber);\n  \n  return {\n    itemId,\n    serialNumber,\n    Name: modelName\n  };\n}\n\n// Check for error in XML\nif (xmlText.includes('<error>')) {\n  const errorMatch = xmlText.match(/<error>(.*?)<\\/error>/);\n  console.log(`Apple API returned error: ${errorMatch ? errorMatch[1] : 'unknown'} - trying to determine from serial`);\n  modelName = getModelFromSerial(serialNumber);\n  \n  return {\n    itemId,\n    serialNumber,\n    Name: modelName\n  };\n}\n\n// Try to extract model name from various XML tags\nconst patterns = [\n  /<configCode>(.*?)<\\/configCode>/,\n  /<productDescription>(.*?)<\\/productDescription>/,\n  /<productName>(.*?)<\\/productName>/,\n];\n\nfor (const pattern of patterns) {\n  const match = xmlText.match(pattern);\n  if (match && match[1] && match[1].trim() !== '') {\n    modelName = match[1].trim();\n    console.log(`Found model from API: ${modelName}`);\n    break;\n  }\n}\n\n// If still no model found after trying all patterns\nif (modelName === 'Mac') {\n  console.log(`No model info found in XML for ${serialNumber} - determining from serial`);\n  modelName = getModelFromSerial(serialNumber);\n}\n\nconsole.log(`Final: ${serialNumber} -> \"${modelName}\" (Item: ${itemId})`);\n\nreturn {\n  itemId,\n  serialNumber,\n  Name: modelName\n};"
      },
      "id": "87ca89c7-06b3-41b1-98b3-816b0eaf2393",
      "name": "Parse Success Output Mac",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -304,
        -128
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add this as a new Code node after HTTP Request\nconst response = $json;\nconsole.log('Monday.com response:', JSON.stringify(response, null, 2));\n\nif (response.data && response.data.change_multiple_column_values) {\n  return [{\n    json: {\n      status: \"SUCCESS\",\n      message: \"Model updated successfully\",\n      itemId: response.data.change_multiple_column_values.id\n    }\n  }];\n} else {\n  return [{\n    json: {\n      status: \"ERROR\", \n      message: \"Update may have failed\",\n      response: response\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        -128
      ],
      "id": "b07604ef-f030-4158-b9da-493c6133fcae",
      "name": "Check Update Status Mac"
    },
    {
      "parameters": {
        "jsCode": "// Summary of all processed devices\nconst allExecutions = $input.all();\nconst summary = {\n  totalProcessed: allExecutions.length,\n  devices: allExecutions.map(exec => ({\n    serial: exec.json.serialNumber || 'unknown',\n    status: exec.json.status || 'unknown',\n    itemId: exec.json.itemId || 'unknown'\n  }))\n};\n\nconsole.log('=== FINAL SUMMARY ===');\nconsole.log(`Processed ${summary.totalProcessed} devices`);\nsummary.devices.forEach(device => {\n  console.log(`${device.serial}: ${device.status} (Item: ${device.itemId})`);\n});\n\nreturn [{ json: summary }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        -128
      ],
      "id": "fec52a21-934d-4009-b08a-bdf38100b5dc",
      "name": "Final Summary Mac"
    },
    {
      "parameters": {
        "jsCode": "const itemId = $json.itemId;\nconst modelName = $json.Name || 'Mac';\nconst serialNumber = $json.serialNumber;\n\n// Simply clean the model name - remove any problematic characters\nconst cleanName = modelName\n  .replace(/[^\\w\\s\\-()]/g, '') // Keep only alphanumeric, spaces, hyphens, parentheses\n  .trim();\n\nconsole.log(`Cleaning: \"${modelName}\" -> \"${cleanName}\"`);\n\nreturn {\n  itemId: itemId,\n  serialNumber: serialNumber,\n  Name: cleanName\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        -128
      ],
      "id": "74e52e94-3ad0-4683-9a08-dcc5ca5d2f68",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "changeMultipleColumnValues",
        "boardId": "2107542488",
        "itemId": "={{ $('Code in JavaScript').item.json.itemId }}",
        "columnValues": "={\n  \"text_mkw78a6r\": {{ $json.Name }}\n}"
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        192,
        -128
      ],
      "id": "948a5925-0aef-4bea-aea6-c3ae8fa91c49",
      "name": "Change multiple column values for a board item",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    }
  ],
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Get Monday Items Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items Lenovo": {
      "main": [
        [
          {
            "node": "Filter Target Items Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items Mac": {
      "main": [
        [
          {
            "node": "Filter Target Items Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items Lenovo": {
      "main": [
        [
          {
            "node": "Get Model Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model Lenovo": {
      "main": [
        [
          {
            "node": "Parse Success Output Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output Lenovo": {
      "main": [
        [
          {
            "node": "HTTP Request Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Lenovo": {
      "main": [
        [
          {
            "node": "Check Update Status Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Update Status Lenovo": {
      "main": [
        [
          {
            "node": "Final Summary Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items Mac": {
      "main": [
        [
          {
            "node": "Get Model Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model Mac": {
      "main": [
        [
          {
            "node": "Parse Success Output Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output Mac": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Update Status Mac": {
      "main": [
        [
          {
            "node": "Final Summary Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Change multiple column values for a board item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Change multiple column values for a board item": {
      "main": [
        [
          {
            "node": "Check Update Status Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Jerusalem",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "9c1f5234-be7e-498c-8db8-d5ce428efb7b",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-28T16:51:52.916Z",
      "updatedAt": "2025-09-28T16:51:52.916Z",
      "role": "workflow:owner",
      "workflowId": "WvXu0pxOgmwwtlqd",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}