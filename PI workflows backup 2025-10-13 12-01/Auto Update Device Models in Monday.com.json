{
  "createdAt": "2025-09-28T16:51:52.912Z",
  "updatedAt": "2025-10-12T13:12:51.000Z",
  "id": "WvXu0pxOgmwwtlqd",
  "name": "Auto Update Device Models in Monday.com",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -432,
        144
      ],
      "id": "39d5281a-e235-4d27-84fe-082fdd4bbd96",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv04x7h",
        "returnAll": true
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        -176,
        64
      ],
      "id": "becf5501-6c15-4089-9968-2a3e1d3b26a4",
      "name": "Get Monday Items Lenovo",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const targetSerials = [\n  'PG02VQ9C',\n  'PG02VQ9G',\n  'PG02VQ9T',\n  'PG02VQA8',\n  'PG02YJ51',\n  'PG02YJ4G',\n  'PG02VQAP',\n  'PG02YJEC',\n  'PG02VQB6',\n  'PG02YJDP'\n];\n\nconst itemsToProcess = [];\nconst skippedDevices = [];\nconst notFoundDevices = [];\n\nfunction getDeviceType(serial) {\n  if (serial.startsWith('C02') && serial.length >= 10) return 'Apple';\n  if (serial.startsWith('CND')) return 'Dell';\n  if (serial.match(/^(PC|PF|PG|MP|R)/)) return 'Lenovo';\n  if (serial.match(/^\\d+[A-Z]+$/)) return 'Lenovo';\n  if (serial.startsWith('MP')) return 'Unknown';\n  return 'Unknown';\n}\n\nconsole.log(`🔍 Processing ${targetSerials.length} target devices...`);\n\nconst mondayItemsMap = new Map();\nitems.forEach(item => {\n  const serial = item.json.name?.trim();\n  if (serial) {\n    mondayItemsMap.set(serial, item);\n  }\n});\n\nconsole.log(`📋 Found ${mondayItemsMap.size} total items in Monday.com`);\n\ntargetSerials.forEach(targetSerial => {\n  const item = mondayItemsMap.get(targetSerial);\n\n  if (item) {\n    const deviceType = getDeviceType(targetSerial);\n\n    if (deviceType === 'Lenovo') {\n      console.log(`✅ ${targetSerial} - Lenovo device (ID: ${item.json.id})`);\n      itemsToProcess.push({\n        json: {\n          itemId: item.json.id,\n          itemName: item.json.name,\n          serialNumber: targetSerial,\n          deviceType\n        }\n      });\n    } else {\n      console.log(`⏭️ ${targetSerial} - ${deviceType} device (skipped)`);\n      skippedDevices.push({\n        serial: targetSerial,\n        type: deviceType,\n        reason: 'Not Lenovo device'\n      });\n    }\n  } else {\n    console.log(`❌ ${targetSerial} - Not found in Monday.com`);\n    notFoundDevices.push(targetSerial);\n  }\n});\n\nconsole.log(`\\n📊 PROCESSING SUMMARY:`);\nconsole.log(`   ✅ Lenovo devices to process: ${itemsToProcess.length}`);\nconsole.log(`   ⏭️ Non-Lenovo devices skipped: ${skippedDevices.length}`);\nconsole.log(`   ❌ Not found in Monday.com: ${notFoundDevices.length}`);\n\nif (skippedDevices.length > 0) {\n  console.log(`\\n⏭️ SKIPPED DEVICES (Non-Lenovo):`);\n  skippedDevices.forEach(dev => console.log(`   - ${dev.serial} (${dev.type})`));\n}\n\nif (notFoundDevices.length > 0) {\n  console.log(`\\n❌ NOT FOUND IN MONDAY.COM:`);\n  notFoundDevices.forEach(serial => console.log(`   - ${serial}`));\n}\n\nif (itemsToProcess.length > 0) {\n  console.log(`\\n🚀 PROCESSING ${itemsToProcess.length} LENOVO DEVICES...`);\n  return itemsToProcess;\n} else {\n  return [{\n    json: {\n      message: \"No Lenovo devices found to process\",\n      summary: {\n        total: targetSerials.length,\n        lenovo: itemsToProcess.length,\n        skipped: skippedDevices.length,\n        notFound: notFoundDevices.length\n      },\n      skippedDevices,\n      notFoundDevices\n    }\n  }];\n}\n"
      },
      "id": "107da51d-510f-4a7c-b360-25718fdbad3f",
      "name": "Filter Target Items Lenovo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        64
      ]
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"Invoke-WebRequest 'https://pcsupport.lenovo.com/gb/en/api/v4/mse/getproducts?productId={{ $json.serialNumber }}' | Select-Object -ExpandProperty Content | Out-String | Write-Output\"",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        576,
        64
      ],
      "id": "cc84a9f1-436f-451c-8aca-0fbd6dca422f",
      "name": "Get Model Lenovo",
      "credentials": {
        "sshPassword": {
          "id": "TrReRPqJQXNQceVu",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse Lenovo API response\nconst lenovoData = JSON.parse($json.stdout);\n\n// Get the itemId and serialNumber from Filter Target Items1 node\nconst itemId = $('Filter Target Items Lenovo').item.json.itemId;\nconst serialNumber = $('Filter Target Items Lenovo').item.json.serialNumber;\n\nconsole.log(`Processing ${serialNumber} for item ${itemId}`);\n\nlet bestResult = null;\n\nif (Array.isArray(lenovoData) && lenovoData.length > 0) {\n  bestResult = lenovoData.reduce((best, current) => {\n    const currentName = current.Name || '';\n    const bestName = best ? (best.Name || '') : '';\n    \n    if (currentName.includes('THINKPAD') || currentName.includes('IDEAPAD') || currentName.includes('YOGA')) {\n      return current;\n    }\n    \n    if (currentName.length > bestName.length) {\n      return current;\n    }\n    \n    return best || current;\n  }, null);\n  \n} else if (lenovoData && !Array.isArray(lenovoData)) {\n  bestResult = lenovoData;\n} else {\n  console.log(`No valid data from Lenovo API for ${serialNumber}`);\n  return {\n    itemId,\n    serialNumber,\n    Name: 'Model Not Found',\n    error: 'No data from Lenovo API'\n  };\n}\n\n// Clean up model name\nlet modelName = bestResult.Name || 'Unknown Model';\n\nif (modelName.includes('X1 Carbon')) {\n  const carbonMatch = modelName.match(/(X1 Carbon \\d+\\w* Gen)/i);\n  if (carbonMatch) modelName = carbonMatch[1];\n} else if (modelName.includes('T490s')) {\n  modelName = 'ThinkPad T490s';\n} else if (modelName.includes('T490')) {\n  modelName = 'ThinkPad T490';\n} else if (modelName.includes('T480')) {\n  modelName = 'ThinkPad T480s';\n}\n\nmodelName = modelName\n  .replace(/[-_]/g, ' ')\n  .replace(/\\s+/g, ' ')\n  .replace(/\\s*\\(.*?\\)\\s*/g, ' ')\n  .trim();\n\nconsole.log(`Final: ${serialNumber} -> \"${modelName}\" (Item: ${itemId})`);\n\nreturn {\n  itemId,\n  serialNumber,\n  Name: modelName\n};"
      },
      "id": "b45392e7-7ffd-4ac5-9cb3-b21806824f52",
      "name": "Parse Success Output Lenovo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        848,
        64
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.monday.com/v2",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mondayComApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=mutation {\n  change_multiple_column_values (\n    board_id: 2107542488,\n    item_id: {{$json.itemId}},\n    column_values: \"{\\\"text_mkw78a6r\\\": \\\"{{$json.Name}}\\\"}\"\n  ) {\n    id\n  }\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        64
      ],
      "id": "d6b5f09b-b808-467d-87c0-5441fcd004f4",
      "name": "HTTP Request Lenovo",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Add this as a new Code node after HTTP Request\nconst response = $json;\nconsole.log('Monday.com response:', JSON.stringify(response, null, 2));\n\nif (response.data && response.data.change_multiple_column_values) {\n  return [{\n    json: {\n      status: \"SUCCESS\",\n      message: \"Model updated successfully\",\n      itemId: response.data.change_multiple_column_values.id\n    }\n  }];\n} else {\n  return [{\n    json: {\n      status: \"ERROR\", \n      message: \"Update may have failed\",\n      response: response\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1376,
        64
      ],
      "id": "e96912df-12ad-4bfd-9c78-2276be5c5b80",
      "name": "Check Update Status Lenovo"
    },
    {
      "parameters": {
        "jsCode": "// Summary of all processed devices\nconst allExecutions = $input.all();\nconst summary = {\n  totalProcessed: allExecutions.length,\n  devices: allExecutions.map(exec => ({\n    serial: exec.json.serialNumber || 'unknown',\n    status: exec.json.status || 'unknown',\n    itemId: exec.json.itemId || 'unknown'\n  }))\n};\n\nconsole.log('=== FINAL SUMMARY ===');\nconsole.log(`Processed ${summary.totalProcessed} devices`);\nsummary.devices.forEach(device => {\n  console.log(`${device.serial}: ${device.status} (Item: ${device.itemId})`);\n});\n\nreturn [{ json: summary }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1584,
        64
      ],
      "id": "a3767b04-bb21-4de6-afec-f11e4af4a8f2",
      "name": "Final Summary Lenovo"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.monday.com/v2",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "mondayComApi",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=mutation {\n  change_multiple_column_values (\n    board_id: 2107542488,\n    item_id: {{$json.itemId}},\n    column_values: \"{\\\"text_mkw78a6r\\\": \\\"{{$json.Name}}\\\"}\"\n  ) {\n    id\n  }\n}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1152,
        272
      ],
      "id": "cbc221a3-9216-4911-8d73-d12edfb9373b",
      "name": "HTTP Request Mac1",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv06h76",
        "returnAll": true
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        -176,
        272
      ],
      "id": "d682f270-c914-4180-b541-76b9af7ae0b3",
      "name": "Get Monday Items Mac",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const targetSerials = [\n  'C02FX667ML85', 'C02DQNJ5Q05D', 'C02FD3RKML85', 'FVHDV1ZKQ05D', 'C02F60PZML85',\n  'C02DQ677ML85', 'C02F61PGML85', 'C02DQM19Q05D', 'C02DQKWDQ05D', 'C02G479HML85',\n  'C02DQMMNQ05D', 'C02D960PP3Y1', 'C02DQKTEQ05D', 'C02FN05DML85', 'C02DQKL9Q05D',\n  'C02FJ4M8ML85', 'C02F60NXML85', 'C02FN07DML85', 'C02F60N7ML85', 'C02DQKTWQ05D',\n  'C02VW1SHHV2R', 'C02DQLEDQ05D', 'C02DW275ML85', 'C02FM59ZML85', 'C02FN05MML85',\n  'C02G470SML85', 'C02DQNQAQ05D', 'C02DQS28Q05D', 'C02DQSJ7Q05D', 'FVFH11HXQ05D',\n  'C02DQNGCQ05D', 'FVFH11K1Q05D', 'C02DQMB1Q05D', 'C02DW5Q6Q05D', 'FVFGVH4HQ05D',\n  'FVFH10RRQ05D', 'C02G46R8ML85', 'C02DW5SLQ05D', 'C02F60P3ML85', 'C02Z95V0LVDL',\n  'C02YH55UJD2', 'C02G462ZML85', 'FVHDV1VKQ05D', 'C02XJ4N8JHD3', 'C02FX5CMML85',\n  'FVHDV24YQ05D', 'C02XT0NSJHD2', 'FVHDV6DRQ05D', 'C02DQMD1Q05D', 'C02SR3MFGTDY',\n  'C02YQ669LVDC', 'C02YJ4PYJHD2', 'C02Y14R2JHD2', 'C02ZGOBTLVDM', 'C02YX1D6LVDG',\n  'C02G46Q3ML85', 'C02YT40ELVDL', 'C02DQM2RQO5D'\n];\n\nconst items = $input.all();\nconst itemsToProcess = [];\nconst skippedDevices = [];\nconst notFoundDevices = [];\n\n// List of target serials to match\nconst targetSerials = [\n  'FVFG11FDQ05P',\n  'C02F32RCML85',\n  'FVFFG3FXQ05P',\n  'FVFG802VQ05P',\n  'C02CV1M8ML87',\n  'FVFGK3LWQ05P',\n  'FVFG11FTQ05P',\n  'FVFG11FAQ05P',\n  'FVFXQ11SHV2H',\n  'FVFG140CQ05P',\n  'FVFFD99KQ05D',\n  'C02Y73D1JHD2',\n  'C02ZP209LVDM',\n  'VQH07WM6WT',\n  'C02C81GULVDM',\n  'C02FD669ML7H',\n  'C02Z4269LVDM'\n];\n\n// Input data from Monday.com\nconst items = $input.all();\nconst itemsToProcess = [];\nconst skippedDevices = [];\nconst notFoundDevices = [];\n\n// --- Device Type Detection ---\nfunction getDeviceType(serial) {\n  const upper = serial.toUpperCase();\n\n  // Apple serials are 10–12 alphanumeric characters, no spaces or symbols\n  if (/^[A-Z0-9]{10,12}$/.test(upper)) return 'Apple';\n\n  return 'Unknown';\n}\n\n// --- Start Processing ---\nconsole.log(`🔍 Processing ${targetSerials.length} target devices...`);\n\n// Create a normalized lookup map from Monday.com items\nconst mondayItemsMap = new Map();\nitems.forEach(item => {\n  const serial = item.json.name?.trim().toUpperCase();\n  if (serial) mondayItemsMap.set(serial, item);\n});\n\nconsole.log(`📋 Found ${mondayItemsMap.size} total items in Monday.com`);\n\n// Compare and process\ntargetSerials.forEach(serial => {\n  const upperSerial = serial.toUpperCase();\n  const item = mondayItemsMap.get(upperSerial);\n\n  if (item) {\n    const deviceType = getDeviceType(upperSerial);\n\n    if (deviceType === 'Apple') {\n      console.log(`✅ ${upperSerial} - Apple device (ID: ${item.json.id})`);\n      itemsToProcess.push({\n        json: {\n          itemId: item.json.id,\n          itemName: item.json.name,\n          serialNumber: upperSerial,\n          deviceType\n        }\n      });\n    } else {\n      console.log(`⏭️ ${upperSerial} - ${deviceType} device (skipped)`);\n      skippedDevices.push({\n        serial: upperSerial,\n        type: deviceType,\n        reason: 'Not Apple device'\n      });\n    }\n  } else {\n    console.log(`❌ ${upperSerial} - Not found in Monday.com`);\n    notFoundDevices.push(upperSerial);\n  }\n});\n\n// --- Summary ---\nconsole.log(`\\n📊 PROCESSING SUMMARY:`);\nconsole.log(`   ✅ Apple devices to process: ${itemsToProcess.length}`);\nconsole.log(`   ⏭️ Non-Apple devices skipped: ${skippedDevices.length}`);\nconsole.log(`   ❌ Not found in Monday.com: ${notFoundDevices.length}`);\n\nif (skippedDevices.length > 0) {\n  console.log(`\\n⏭️ SKIPPED DEVICES:`);\n  skippedDevices.forEach(d => console.log(`   - ${d.serial} (${d.type})`));\n}\n\nif (notFoundDevices.length > 0) {\n  console.log(`\\n❌ NOT FOUND IN MONDAY.COM:`);\n  notFoundDevices.forEach(s => console.log(`   - ${s}`));\n}\n\n// --- Output ---\nif (itemsToProcess.length > 0) {\n  console.log(`\\n🚀 PROCESSING ${itemsToProcess.length} APPLE DEVICES...`);\n  return itemsToProcess;\n} else {\n  return [{\n    json: {\n      message: \"No Apple devices found to process\",\n      summary: {\n        total: targetSerials.length,\n        apple: itemsToProcess.length,\n        skipped: skippedDevices.length,\n        notFound: notFoundDevices.length\n      },\n      skippedDevices,\n      notFoundDevices\n    }\n  }];\n}\n\n\nconsole.log(`🔍 Processing ${targetSerials.length} target devices...`);\n\nconst mondayItemsMap = new Map();\nitems.forEach(item => {\n  const serial = item.json.name?.trim();\n  if (serial) {\n    mondayItemsMap.set(serial, item);\n  }\n});\n\nconsole.log(`📋 Found ${mondayItemsMap.size} total items in Monday.com`);\n\ntargetSerials.forEach(targetSerial => {\n  const item = mondayItemsMap.get(targetSerial);\n  \n  if (item) {\n    const deviceType = getDeviceType(targetSerial);\n    \n    if (deviceType === 'Apple') {\n      console.log(`✅ ${targetSerial} - Apple device (ID: ${item.json.id})`);\n      itemsToProcess.push({\n        json: {\n          itemId: item.json.id,\n          itemName: item.json.name,\n          serialNumber: targetSerial,\n          deviceType\n        }\n      });\n    } else {\n      console.log(`⏭️ ${targetSerial} - ${deviceType} device (skipped)`);\n      skippedDevices.push({\n        serial: targetSerial,\n        type: deviceType,\n        reason: 'Not Apple device'\n      });\n    }\n  } else {\n    console.log(`❌ ${targetSerial} - Not found in Monday.com`);\n    notFoundDevices.push(targetSerial);\n  }\n});\n\nconsole.log(`\\n📊 PROCESSING SUMMARY:`);\nconsole.log(`   ✅ Apple devices to process: ${itemsToProcess.length}`);\nconsole.log(`   ⏭️ Non-Apple devices skipped: ${skippedDevices.length}`);\nconsole.log(`   ❌ Not found in Monday.com: ${notFoundDevices.length}`);\n\nif (skippedDevices.length > 0) {\n  console.log(`\\n⏭️ SKIPPED DEVICES (Non-Apple):`);\n  skippedDevices.forEach(dev => console.log(`   - ${dev.serial} (${dev.type})`));\n}\n\nif (notFoundDevices.length > 0) {\n  console.log(`\\n❌ NOT FOUND IN MONDAY.COM:`);\n  notFoundDevices.forEach(serial => console.log(`   - ${serial}`));\n}\n\nif (itemsToProcess.length > 0) {\n  console.log(`\\n🚀 PROCESSING ${itemsToProcess.length} APPLE DEVICES...`);\n  return itemsToProcess;\n} else {\n  return [{\n    json: {\n      message: \"No Apple devices found to process\",\n      summary: {\n        total: targetSerials.length,\n        apple: itemsToProcess.length,\n        skipped: skippedDevices.length,\n        notFound: notFoundDevices.length\n      },\n      skippedDevices,\n      notFoundDevices\n    }\n  }];\n}"
      },
      "id": "12eb223f-4e2a-4d39-bf23-d16bd0aa1fa6",
      "name": "Filter Target Items Mac",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        256,
        272
      ]
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"$serial = '{{ $json.serialNumber }}'; $cc = $serial.Substring($serial.Length - 4); Invoke-WebRequest \\\"https://support-sp.apple.com/sp/product?cc=$cc\\\" | Select-Object -ExpandProperty Content | Out-String | Write-Output\"",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        576,
        272
      ],
      "id": "39f54bc7-d5a6-4cd1-80a2-6017abdbe783",
      "name": "Get Model Mac",
      "credentials": {
        "sshPassword": {
          "id": "TrReRPqJQXNQceVu",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse Apple API response - PowerShell is returning ASCII codes, not text\nlet rawResponse = $json.stdout;\n\nconst itemId = $('Filter Target Items Mac').item.json.itemId;\nconst serialNumber = $('Filter Target Items Mac').item.json.serialNumber;\n\nconsole.log(`Processing ${serialNumber} for item ${itemId}`);\n\n// Convert ASCII decimal codes to actual text\n// The stdout contains numbers separated by \\r\\n\nconst asciiCodes = rawResponse.split('\\r\\n').filter(code => code.trim() !== '');\nconst xmlText = asciiCodes.map(code => String.fromCharCode(parseInt(code))).join('');\n\nconsole.log('Converted XML:', xmlText);\n\nlet modelName = 'Unknown Model';\n\n// Check for error in XML\nif (xmlText.includes('<error>')) {\n  const errorMatch = xmlText.match(/<error>(.*?)<\\/error>/);\n  console.log(`Apple API returned error: ${errorMatch ? errorMatch[1] : 'unknown'}`);\n  return {\n    itemId,\n    serialNumber,\n    Name: 'Model Not Found (API Error)',\n    error: errorMatch ? errorMatch[1] : 'API error'\n  };\n}\n\n// Extract model name from configCode tag\nconst configMatch = xmlText.match(/<configCode>(.*?)<\\/configCode>/);\n\nif (configMatch && configMatch[1]) {\n  modelName = configMatch[1];\n  console.log(`Found model: ${modelName}`);\n} else {\n  console.log(`No model found in XML for ${serialNumber}`);\n  return {\n    itemId,\n    serialNumber,\n    Name: 'Model Not Found',\n    error: 'No configCode in XML'\n  };\n}\n\nconsole.log(`Final: ${serialNumber} -> \"${modelName}\" (Item: ${itemId})`);\n\nreturn {\n  itemId,\n  serialNumber,\n  Name: modelName\n};"
      },
      "id": "da5c7514-01be-4e70-9e21-b873259c6449",
      "name": "Parse Success Output Mac",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        272
      ]
    },
    {
      "parameters": {
        "jsCode": "// Add this as a new Code node after HTTP Request\nconst response = $json;\nconsole.log('Monday.com response:', JSON.stringify(response, null, 2));\n\nif (response.data && response.data.change_multiple_column_values) {\n  return [{\n    json: {\n      status: \"SUCCESS\",\n      message: \"Model updated successfully\",\n      itemId: response.data.change_multiple_column_values.id\n    }\n  }];\n} else {\n  return [{\n    json: {\n      status: \"ERROR\", \n      message: \"Update may have failed\",\n      response: response\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1392,
        272
      ],
      "id": "158e3a48-5cbd-4fc9-ad85-4ee73feeda0b",
      "name": "Check Update Status Mac"
    },
    {
      "parameters": {
        "jsCode": "// Summary of all processed devices\nconst allExecutions = $input.all();\nconst summary = {\n  totalProcessed: allExecutions.length,\n  devices: allExecutions.map(exec => ({\n    serial: exec.json.serialNumber || 'unknown',\n    status: exec.json.status || 'unknown',\n    itemId: exec.json.itemId || 'unknown'\n  }))\n};\n\nconsole.log('=== FINAL SUMMARY ===');\nconsole.log(`Processed ${summary.totalProcessed} devices`);\nsummary.devices.forEach(device => {\n  console.log(`${device.serial}: ${device.status} (Item: ${device.itemId})`);\n});\n\nreturn [{ json: summary }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        272
      ],
      "id": "1f48ec6f-0f87-4332-8f21-bd1c20d37a09",
      "name": "Final Summary Mac"
    }
  ],
  "connections": {
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Get Monday Items Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items Lenovo": {
      "main": [
        [
          {
            "node": "Filter Target Items Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items Lenovo": {
      "main": [
        [
          {
            "node": "Get Model Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model Lenovo": {
      "main": [
        [
          {
            "node": "Parse Success Output Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output Lenovo": {
      "main": [
        [
          {
            "node": "HTTP Request Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Lenovo": {
      "main": [
        [
          {
            "node": "Check Update Status Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Update Status Lenovo": {
      "main": [
        [
          {
            "node": "Final Summary Lenovo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Mac1": {
      "main": [
        [
          {
            "node": "Check Update Status Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items Mac": {
      "main": [
        [
          {
            "node": "Filter Target Items Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items Mac": {
      "main": [
        [
          {
            "node": "Get Model Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model Mac": {
      "main": [
        [
          {
            "node": "Parse Success Output Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output Mac": {
      "main": [
        [
          {
            "node": "HTTP Request Mac1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Update Status Mac": {
      "main": [
        [
          {
            "node": "Final Summary Mac",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Jerusalem",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "34d72df3-233f-4a75-9625-9859d1bec77f",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-28T16:51:52.916Z",
      "updatedAt": "2025-09-28T16:51:52.916Z",
      "role": "workflow:owner",
      "workflowId": "WvXu0pxOgmwwtlqd",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}