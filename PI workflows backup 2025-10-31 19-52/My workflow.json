{
  "updatedAt": "2025-10-31T06:19:39.668Z",
  "createdAt": "2025-10-31T06:19:39.668Z",
  "id": "GH3XZsvkcpjtQOzL",
  "name": "My workflow",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "url": "https://api.ipify.org?format=json",
        "options": {}
      },
      "id": "e5b10fb6-aa7b-4ed8-a7de-e40e1323e829",
      "name": "Get Current IP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -2640,
        -336
      ]
    },
    {
      "parameters": {
        "jsCode": "const domain = 'alex-it.net';\nconst zoneID = '3462e9f3ae9f12d67018a49274db3def';\n\n// Get all inputs and log them\nconst allInputs = $input.all();\nconsole.log('=== DEBUG: All inputs received ===');\nconsole.log('Number of inputs:', allInputs.length);\n\nallInputs.forEach((input, index) => {\n  console.log(`Input ${index}:`, JSON.stringify(input.json, null, 2).substring(0, 500));\n});\n\n// Find current IP\nconst ipInput = allInputs.find(item => item.json && item.json.ip);\nconst currentIP = ipInput ? ipInput.json.ip : null;\nconsole.log('Current IP found:', currentIP);\n\n// Find DNS records - with detailed checking\nconst dnsInput = allInputs.find(item => {\n  const hasJson = item.json != null;\n  const hasResult = item.json && item.json.result != null;\n  const isArray = item.json && Array.isArray(item.json.result);\n  console.log('Checking input:', { hasJson, hasResult, isArray });\n  return hasJson && hasResult && isArray;\n});\n\nconsole.log('DNS input found:', !!dnsInput);\n\nif (dnsInput) {\n  console.log('DNS response structure:', {\n    hasSuccess: 'success' in dnsInput.json,\n    successValue: dnsInput.json.success,\n    hasResult: 'result' in dnsInput.json,\n    resultIsArray: Array.isArray(dnsInput.json.result),\n    resultLength: dnsInput.json.result ? dnsInput.json.result.length : 0\n  });\n}\n\nconst dnsResponse = dnsInput ? dnsInput.json : null;\n\nif (!currentIP) {\n  throw new Error('Could not find current IP in inputs');\n}\n\nif (!dnsResponse) {\n  throw new Error('Could not find DNS records input');\n}\n\nif (!dnsResponse.result) {\n  throw new Error('DNS response has no result field');\n}\n\nif (!Array.isArray(dnsResponse.result)) {\n  throw new Error('DNS response result is not an array');\n}\n\n// Extract ALL A records that are NOT proxied\nconst sites = dnsResponse.result\n  .filter(record => {\n    if (record.type !== 'A') return false;\n    \n    if (record.proxied === true) {\n      console.log(`Skipping proxied record: ${record.name}`);\n      return false;\n    }\n    \n    return record.name.endsWith(`.${domain}`) || record.name === domain;\n  })\n  .map(record => {\n    const subdomain = record.name === domain ? '@' : record.name.replace(`.${domain}`, '');\n    return { \n      subdomain,\n      currentIP: record.content\n    };\n  });\n\nconsole.log(`Found ${sites.length} non-proxied A records to manage:`);\nsites.forEach(s => console.log(`  - ${s.subdomain} (current: ${s.currentIP})`));\n\nreturn [{\n  json: {\n    domain,\n    zoneID,\n    newIP: currentIP,\n    sites: sites.map(s => ({ \n      subdomain: s.subdomain,\n      fqdn: s.subdomain === '@' ? domain : `${s.subdomain}.${domain}`\n    }))\n  }\n}];"
      },
      "id": "fcfbd1d7-8366-43db-8fc5-f278abd27c7f",
      "name": "Prepare Sites",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1968,
        -112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Fan out one item per FQDN, attach zoneID\nconst original = $input.first().json;\n\nif (!original || !Array.isArray(original.sites)) throw new Error('sites missing or not an array');\n\nreturn original.sites.map(site => ({\n  json: {\n    subdomain: site.subdomain,\n    fqdn: site.fqdn,\n    domain: original.domain,\n    newIP: original.newIP,\n    zoneID: original.zoneID\n  }\n}));"
      },
      "id": "26c341ce-0380-4577-90bc-e9bd4db3e418",
      "name": "Expand Sites",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1664,
        -112
      ]
    },
    {
      "parameters": {
        "url": "={{ 'https://api.cloudflare.com/client/v4/zones/' + $json.zoneID + '/dns_records?type=A&name=' + $json.fqdn }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareApi",
        "options": {}
      },
      "id": "30827fd8-0731-4c8a-ab49-bacfc185ea0b",
      "name": "Get DNS Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1392,
        -112
      ],
      "credentials": {
        "cloudflareApi": {
          "id": "23zTRVy3Y1m8sopZ",
          "name": "Cloudflare account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge Cloudflare response with original site data using paired items\nconst cfItems = $input.all();\nreturn cfItems.map((item, i) => {\n  const pairedIndex = (item.pairedItem && item.pairedItem.item != null) ? item.pairedItem.item : i;\n  const original = $items('Expand Sites')[pairedIndex].json;\n  const record = item.json?.result?.[0] || {};\n\n  return {\n    json: {\n      subdomain: original.subdomain,\n      fqdn: original.fqdn,\n      domain: original.domain,\n      newIP: original.newIP,\n      zoneID: original.zoneID,\n      recordId: record.id || '',\n      existingIP: record.content || '',\n      existingTTL: record.ttl != null ? record.ttl : 1,\n      existingProxied: record.proxied != null ? record.proxied : false\n    }\n  };\n});"
      },
      "id": "d53b3171-8d99-4875-9ef6-062f6945dc4f",
      "name": "Prepare Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        -112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Evaluate each incoming item (one per FQDN)\nconst items = $input.all();\n\nconst desiredTTL = 1;         // Cloudflare \"Auto\"\nconst desiredProxied = false; // DNS only\n\nreturn items.map(item => {\n  const j = item.json;\n  const hasRecord = !!j.recordId;\n\n  const needsUpdate =\n    !hasRecord ||\n    j.existingIP !== j.newIP ||\n    j.existingTTL !== desiredTTL ||\n    j.existingProxied !== desiredProxied;\n\n  console.log(\n    `[${j.fqdn}] ${j.existingIP || '<none>'} -> ${j.newIP} | ttl:${j.existingTTL} proxied:${j.existingProxied} | update? ${needsUpdate}`\n  );\n\n  return {\n    json: { ...j, hasRecord, needsUpdate, desiredTTL, desiredProxied }\n  };\n});\n"
      },
      "id": "fdd8390c-a5d9-44f6-8bf1-6e20f0a03bb9",
      "name": "Check If Update Needed",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        -112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "cond-needs",
              "leftValue": "={{ $json.needsUpdate }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "684f974b-408f-439e-8fa3-fee1ea243b4b",
      "name": "Needs Update?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -576,
        -112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "cond-hasrec",
              "leftValue": "={{ $json.hasRecord }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "cbc41927-3f16-4de1-ad4b-3df80d63fb22",
      "name": "Has Record?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -320,
        -400
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ 'https://api.cloudflare.com/client/v4/zones/' + $json.zoneID + '/dns_records/' + $json.recordId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ type: 'A', name: $json.fqdn, content: $json.newIP, ttl: $json.desiredTTL, proxied: $json.desiredProxied }) }}",
        "options": {}
      },
      "id": "02b863f3-24e2-4f20-b5bd-85140c3e55b6",
      "name": "Update A Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        32,
        -416
      ],
      "credentials": {
        "cloudflareApi": {
          "id": "23zTRVy3Y1m8sopZ",
          "name": "Cloudflare account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ 'https://api.cloudflare.com/client/v4/zones/' + $json.zoneID + '/dns_records' }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "application/json",
        "body": "={{ JSON.stringify({ type: 'A', name: $json.fqdn, content: $json.newIP, ttl: $json.desiredTTL, proxied: $json.desiredProxied }) }}",
        "options": {}
      },
      "id": "0ffcb082-5247-4118-a992-df8fe236333d",
      "name": "Create A Record",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -208,
        288
      ],
      "credentials": {
        "cloudflareApi": {
          "id": "23zTRVy3Y1m8sopZ",
          "name": "Cloudflare account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const res = item.json || {};\n  const fqdn = (res.result && res.result.name) || res.name || 'unknown';\n  const success = res.success === true;\n  const error = success ? undefined : ((res.errors && res.errors[0] && res.errors[0].message) || res.message || 'Unknown error');\n  return { json: { success, action: 'updated', fqdn, error } };\n});"
      },
      "id": "87dd1df1-493c-48a0-b31d-2714479c2a32",
      "name": "Validate Update",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        -416
      ]
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(item => {\n  const res = item.json || {};\n  const fqdn = (res.result && res.result.name) || res.name || 'unknown';\n  const success = res.success === true;\n  const error = success ? undefined : ((res.errors && res.errors[0] && res.errors[0].message) || res.message || 'Unknown error');\n  return { json: { success, action: 'created', fqdn, error } };\n});"
      },
      "id": "4ef7aa96-d813-401f-b272-d01d14cf0afd",
      "name": "Validate Create",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "// No update needed. Pass a success message to the merge node.\nreturn [{ json: { success: true, action: 'no_change', fqdn: $json.fqdn } }];"
      },
      "id": "889c9a18-2aba-440e-936e-a864259e7e68",
      "name": "No Update Needed",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -32,
        -96
      ]
    },
    {
      "parameters": {
        "jsCode": "const results = $input.all();\nconst timestamp = new Date().toISOString();\nlet created = 0, updated = 0, noChange = 0, failed = 0;\n\nconst createdFQDNs = [];\nconst updatedFQDNs = [];\n\nfor (const item of results) {\n  const r = item.json;\n  if (!r || r.success === false) {\n    failed++;\n    continue;\n  }\n\n  if (r.action === 'created') {\n    created++;\n    createdFQDNs.push(r.fqdn);\n  } else if (r.action === 'updated') {\n    updated++;\n    updatedFQDNs.push(r.fqdn);\n  } else if (r.action === 'no_change') {\n    noChange++;\n  }\n}\n\nconsole.log(`DNS Summary ${timestamp} -> created: ${created}, updated: ${updated}, no change: ${noChange}, failed: ${failed}`);\n\nreturn [{\n  json: {\n    timestamp,\n    created,\n    updated,\n    noChange,\n    failed,\n    total: results.length,\n    createdFQDNs,\n    updatedFQDNs\n  }\n}];\n"
      },
      "id": "84550da9-9268-4db0-862f-a2a8fb138a3c",
      "name": "Log Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -112
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2976,
        -96
      ],
      "id": "862af54d-d3ff-4969-883b-87c74c09e8ab",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09DL842ZUY",
          "mode": "list",
          "cachedResultName": "dns-update"
        },
        "text": "={{$json[\"message\"]}}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1040,
        -112
      ],
      "id": "8a65c115-1902-4a95-90b8-3893787e286b",
      "name": "Send a message",
      "webhookId": "715abbee-bf64-4952-9fc1-d1765c1cf218",
      "credentials": {
        "slackApi": {
          "id": "xYXRUa67wS2uc8Ii",
          "name": "DNS Update"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const timestamp = new Date().toLocaleString(\"en-GB\", {\n  timeZone: \"Asia/Jerusalem\",\n  hour12: false\n}).replace(\",\", \"\");\n\n// 📦 Base summary line\nconst summary = '🛰️ DNS Summary ' + timestamp;\n\n// 🔁 Updated domains with IP diff\nconst updatedText = ($json[\"updatedFQDNs\"] && $json[\"updatedFQDNs\"].length > 0)\n  ? \"\\n\\n:repeat: Updated domains with new IPs:\\n\" +\n    $json[\"updatedFQDNs\"]\n      .map(fqdn => {\n        const match = $items('Prepare Payload').find(i => i.json.fqdn === fqdn);\n        const newIP = match?.json?.newIP || 'unknown';\n        const oldIP = match?.json?.existingIP || 'unknown';\n        return `${fqdn} updated to ${newIP} from old IP ${oldIP}`;\n      }).join(\"\\n\")\n  : \"\";\n\n// 🆕 Created domains\nconst createdText = ($json[\"createdFQDNs\"] && $json[\"createdFQDNs\"].length > 0)\n  ? \"\\n\\n:new: Created domains:\\n\" + $json[\"createdFQDNs\"].join(\"\\n\")\n  : \"\";\n\n// ✅ No change message\nif ($json[\"created\"] === 0 && $json[\"updated\"] === 0 && $json[\"failed\"] === 0) {\n  return [{\n    json: {\n      message: `✅ DNS check completed at ${timestamp} — no changes detected.`\n    }\n  }];\n}\n\n// 📩 Final formatted Slack message\nreturn [{\n  json: {\n    message: summary + updatedText + createdText\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        -112
      ],
      "id": "01f0f87f-86b5-4810-944e-304193734bed",
      "name": "Item Lists"
    },
    {
      "parameters": {
        "url": "https://api.cloudflare.com/client/v4/zones/3462e9f3ae9f12d67018a49274db3def/dns_records?type=A",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "cloudflareApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2640,
        -96
      ],
      "id": "d030d916-1756-41f1-8f39-dadb73a37f20",
      "name": "Get Existing DNS Records",
      "credentials": {
        "cloudflareApi": {
          "id": "23zTRVy3Y1m8sopZ",
          "name": "Cloudflare account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2320,
        -112
      ],
      "id": "be80cb1e-dc9a-4dc1-9456-d58c64f5c787",
      "name": "Merge Inputs"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        336,
        -112
      ],
      "id": "7574daab-e114-43c4-8c1e-7b217ed762cd",
      "name": "Merge Results"
    }
  ],
  "connections": {
    "Get Current IP": {
      "main": [
        [
          {
            "node": "Merge Inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Sites": {
      "main": [
        [
          {
            "node": "Expand Sites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Expand Sites": {
      "main": [
        [
          {
            "node": "Get DNS Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get DNS Record": {
      "main": [
        [
          {
            "node": "Prepare Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Payload": {
      "main": [
        [
          {
            "node": "Check If Update Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Update Needed": {
      "main": [
        [
          {
            "node": "Needs Update?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Update?": {
      "main": [
        [
          {
            "node": "Has Record?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Update Needed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Record?": {
      "main": [
        [
          {
            "node": "Update A Record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create A Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update A Record": {
      "main": [
        [
          {
            "node": "Validate Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create A Record": {
      "main": [
        [
          {
            "node": "Validate Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Update": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Create": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "No Update Needed": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Log Summary": {
      "main": [
        [
          {
            "node": "Item Lists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Existing DNS Records",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Current IP",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Item Lists": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing DNS Records": {
      "main": [
        [
          {
            "node": "Merge Inputs",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Inputs": {
      "main": [
        [
          {
            "node": "Prepare Sites",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Log Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "2ac55325-3935-462d-b0c1-124ac2ee17da",
  "triggerCount": 0,
  "shared": [
    {
      "updatedAt": "2025-10-31T09:14:00.864Z",
      "createdAt": "2025-10-31T09:14:00.864Z",
      "role": "workflow:owner",
      "workflowId": "GH3XZsvkcpjtQOzL",
      "projectId": "pWTWmuHnmIHw48U9"
    }
  ],
  "tags": []
}