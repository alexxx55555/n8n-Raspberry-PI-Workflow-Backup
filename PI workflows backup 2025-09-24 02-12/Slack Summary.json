{
  "createdAt": "2025-09-02T14:14:42.893Z",
  "updatedAt": "2025-09-23T23:10:47.000Z",
  "id": "GzAlS0kt9q4YI0n7",
  "name": "Slack Summary",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-oss-20b",
          "mode": "list",
          "cachedResultName": "openai/gpt-oss-20b"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -976,
        240
      ],
      "id": "1a927e4d-adf4-4011-81c2-b941e66e68a8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "tPLXnEcJzshXrwfS",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09BFKKCMQ8",
          "mode": "list",
          "cachedResultName": "n8n-sammarize"
        },
        "text": "={{$json[\"text\"]}}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -32,
        -16
      ],
      "id": "0d2d706e-b5e8-410a-aabe-4a838b6139cd",
      "name": "Send a message",
      "webhookId": "babdd094-eea0-4a29-997a-dec4a42ed237",
      "executeOnce": false,
      "credentials": {
        "slackApi": {
          "id": "I5astSkOODZZU76Y",
          "name": "n8n Summery"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process each input item\nreturn items.map((item, index) => {\n  const body = item.json.body || item.json;\n  const event = body.event || {};\n  const headers = item.json.headers || {};\n\n  // Add debug logging\n  console.log('Received event type:', body.type);\n  console.log('Event details:', JSON.stringify(event, null, 2));\n\n  // 1) Handle URL verification challenge\n  if (body.type === 'url_verification') {\n    console.log('URL verification challenge');\n    return {\n      json: { challenge: body.challenge },\n      pairedItem: { item: index }\n    };\n  }\n\n  // 2) Skip Slack retries\n  if (headers['x-slack-retry-num'] || headers['x-slack-retry-reason']) {\n    console.log('Skipping Slack retry');\n    return null; // Skip this item\n  }\n\n  // 3) Skip if not a message event or if it's a bot message\n  if (event.type !== 'message' || event.subtype === 'bot_message' || event.bot_id) {\n    console.log('Not a user message, skipping');\n    return null; // Skip this item\n  }\n\n  // 4) Skip messages without text\n  if (!event.text) {\n    console.log('No text in message');\n    return null; // Skip this item\n  }\n\n  // 5) Skip messages from your bot (replace with actual bot user ID)\n  const BOT_USER_ID = 'U07K8QJ9XYZ'; // Replace with your bot's user ID\n  if (BOT_USER_ID && event.user === BOT_USER_ID) {\n    console.log('Ignoring message from bot');\n    return null; // Skip this item\n  }\n\n  // 6) Extract URLs from message\n  const text = event.text || \"\";\n  const urls = new Set();\n\n  // Slack format: <http://example.com|label> or <http://example.com>\n  const slackUrlRegex = /<(https?:\\/\\/[^>|]+)(\\|[^>]+)?>/g;\n  let match;\n  while ((match = slackUrlRegex.exec(text)) !== null) {\n    urls.add(match[1]);\n  }\n\n  // Plain URLs\n  const plainUrlRegex = /https?:\\/\\/[^\\s<>\"'()[\\]{}]+/g;\n  while ((match = plainUrlRegex.exec(text)) !== null) {\n    urls.add(match[0]);\n  }\n\n  // Get first valid URL\n  let firstUrl = '';\n  for (const url of urls) {\n    if (url && url.match(/^https?:\\/\\/.+\\..+/)) {\n      firstUrl = url;\n      break;\n    }\n  }\n\n  if (!firstUrl) {\n    console.log('No valid URL found in message:', text);\n    return null; // Skip this item\n  }\n\n  console.log('Found URL:', firstUrl);\n\n  return {\n    json: {\n      url: firstUrl,\n      text: text,\n      slack_channel: event.channel,\n      slack_user: event.user,\n      slack_ts: event.ts,\n      slack_thread_ts: event.thread_ts,\n      event_id: body.event_id || `${event.ts}-${Date.now()}`\n    },\n    pairedItem: { item: index }\n  };\n}).filter(item => item !== null); // Remove null items (skipped items)"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1312,
        -336
      ],
      "id": "0c25ece3-d3b8-4da1-a120-c88c9d1f0a3e",
      "name": "Extract Slack URL",
      "executeOnce": false
    },
    {
      "parameters": {
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -448,
        -352
      ],
      "id": "8914291d-2386-454c-ac41-f68ed975ab32",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0fbb258e-e797-4ea7-ade1-c268ad5ec88c",
              "leftValue": "={{$json[\"body\"][\"type\"]}}",
              "rightValue": "url_verification",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -976,
        -336
      ],
      "id": "0a2ab962-0662-487f-8e5f-8a8787894a8f",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: { challenge: $json.body.challenge }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        -352
      ],
      "id": "d60f5daf-45a5-492b-a917-4eaef1ea7589",
      "name": "Return Slack Challenge"
    },
    {
      "parameters": {
        "jsCode": "// Debug: let's see what data we have\nconst inputData = $input.first().json;\nconsole.log('Available fields:', Object.keys(inputData));\n\n// Try different possible field names for HTML content\nconst html = inputData.data || \n             inputData.html || \n             inputData.body || \n             inputData.content || \n             inputData.response || \n             \"\";\n\nconsole.log('HTML length:', html.length);\n\nif (!html) {\n    return { \n        error: 'No HTML content found',\n        availableFields: Object.keys(inputData)\n    };\n}\n\n// Simple extraction\nconst MAX_LENGTH = 8000; // Reduced for safety\n\n// Extract paragraphs and headings\nconst matches = html.match(/<(p|h[1-6])[^>]*>(.*?)<\\/\\1>/gis);\n\nlet text = 'No content found.';\nif (matches) {\n    text = matches\n        .map(m => m.replace(/<[^>]+>/g, '').trim())\n        .filter(t => t.length > 5)\n        .slice(0, 20) // Limit to first 20 matches for safety\n        .join('\\n\\n');\n}\n\n// Truncate if too long\nif (text.length > MAX_LENGTH) {\n    text = text.substring(0, MAX_LENGTH) + '... [truncated]';\n}\n\nreturn { \n    article: text,\n    originalLength: html.length,\n    extractedLength: text.length\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1392,
        -16
      ],
      "id": "0d51939a-d3c0-4146-99eb-09d8f2cb8943",
      "name": "HTML Extract"
    },
    {
      "parameters": {
        "jsCode": "const source = ($json.source ?? \"Local\").toString();\nconst raw = ($json.text || $json.output || $json.content || \"\").toString();\n\n// ---------- CLEANUP ----------\nlet s = raw\n  .replace(/<think>[\\s\\S]*?<\\/think>/gi, \"\")\n  .replace(/```(?:json)?\\s*([\\s\\S]*?)```/gi, \"$1\")\n  .trim();\n\nlet obj = null;\ntry { obj = JSON.parse(s); } catch {}\nif (!obj) {\n  const match = s.match(/\\{[\\s\\S]*\\}/);\n  if (match) {\n    try { obj = JSON.parse(match[0]); } catch {}\n  }\n}\n\n// ---------- EXTRACT ----------\nlet title = \"\";\nlet bullets = [];\n\nif (obj && typeof obj === \"object\") {\n  if (typeof obj.title === \"string\") {\n    title = obj.title.trim().slice(0, 80);\n  }\n  if (Array.isArray(obj.bullets)) {\n    bullets = obj.bullets\n      .map(b => (typeof b === \"string\" ? b.trim() : \"\"))\n      .filter(Boolean);\n  }\n}\n\n// ---------- FALLBACK ----------\nif (!title) title = \"Summary\";\n\n// ---------- ENFORCE 5 BULLETS ----------\nif (bullets.length > 5) {\n  bullets = bullets.slice(0, 5);\n}\nwhile (bullets.length < 5) {\n  bullets.push(\"No further details available.\");\n}\n\n// ---------- OUTPUT ----------\nreturn [{\n  json: {\n    title,\n    bullets,\n    source\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        -16
      ],
      "id": "eb065984-dc7d-40df-8183-4b28bd056043",
      "name": "Validator"
    },
    {
      "parameters": {
        "jsCode": "const { title, bullets, error, raw, url } = $json;\n\nif (error) {\n  return [{\n    json: {\n      text: `⚠️ ${error}\\n\\n\\`\\`\\`\\n${raw?.slice(0, 500) || \"No raw content\"}\\n\\`\\`\\``\n    }\n  }];\n}\n\n// Clean the title\nlet cleanTitle = String(title || \"Summary\")\n  .replace(/^[^{\"]*\"?title[\"']?\\s*[:=–-]\\s*/i, \"\")\n  .replace(/^[\"']|[\"']$/g, \"\")\n  .replace(/[.,\"]+$/, \"\")\n  .trim();\n\n// Remove footer from title if accidentally included\ncleanTitle = cleanTitle.replace(/automated with this n8n workflow/i, \"\").trim();\n\n// Clean bullets\nconst cleanBullets = (Array.isArray(bullets) ? bullets : [])\n  .map(b => String(b).trim())\n  .filter(b => !/^[\"']?title[\"']?\\s*[:=–-]/i.test(b))  // STRONG title bullet filter\n  .filter(b => !/automated with this n8n workflow/i.test(b))\n  .map(b => {\n    const cleaned = b.replace(/^[\"']|[\"']$/g, \"\").replace(/[.,\"]+$/, \"\").trim();\n    return cleaned.endsWith(\".\") ? cleaned : `${cleaned}.`;\n  })\n  .filter(Boolean)\n  .slice(0, 5);\n\n// Build final Slack message\nconst parts = [\n  `*🧠 Summary:* ${url ? `<${url}|${cleanTitle}>` : `*${cleanTitle}*`}`,\n  \"\",\n  ...cleanBullets.map(b => `• ${b}`),\n  \"\"\n];\n\nconst text = parts.join(\"\\n\");\n\nreturn [{ json: { text } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        -16
      ],
      "id": "cc9f3dab-5df2-453c-a887-4a438fd045ed",
      "name": "Formatter"
    },
    {
      "parameters": {
        "url": "={{$json[\"url\"]}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1600,
        -16
      ],
      "id": "97f6ae5a-b1a6-4eec-adba-2c2bb1ae9fba",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a summarization tool.\n\nSummarize the following text into exactly 5 meaningful bullet points and a short title.  \nThe article may be incomplete or noisy, but your goal is to extract the most useful or relevant points.\n\nRespond with only a valid JSON object — no commentary, code blocks, or <think> tags.\n\nFormat:\n{\n  \"title\": \"A clear headline describing the article (max 80 characters)\",\n  \"bullets\": [\n    \"First meaningful summary point\",\n    \"Second point\",\n    \"Third point\",\n    \"Fourth point\",\n    \"Fifth point\"\n  ]\n}\n\nRules:\n- Only use information from the input text.\n- If content is unclear, keep bullets short but avoid leaving them empty.\n- Never invent facts.\n- If a point is unclear, summarize it in vague but factual terms.\n- Return only the JSON above, with all 5 bullets populated.\n\nText:\n{{ $json[\"article\"] }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -976,
        -16
      ],
      "id": "4754f413-8875-40e9-b6cf-7aabd6df632a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "slack-events",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1552,
        -336
      ],
      "id": "3f7b6405-f585-4cf2-a513-247bd03164cd",
      "name": "Webhook",
      "webhookId": "d63266c1-1b49-4fc1-8530-cbdb5e8fb27f"
    }
  ],
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extract Slack URL": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Return Slack Challenge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Slack Challenge": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validator": {
      "main": [
        [
          {
            "node": "Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatter": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTML Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Slack URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "d626b164-cd6a-45cb-90ed-55459ad26f17",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-09-02T14:14:42.897Z",
      "updatedAt": "2025-09-02T14:14:42.897Z",
      "role": "workflow:owner",
      "workflowId": "GzAlS0kt9q4YI0n7",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}