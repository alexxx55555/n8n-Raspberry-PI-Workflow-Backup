{
  "createdAt": "2025-09-02T14:15:51.644Z",
  "updatedAt": "2025-09-23T19:54:55.000Z",
  "id": "UkPfwOVWETGpaImb",
  "name": "Slack Web Summary",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "08a8a547-f00b-42e1-8587-46272f7de55d",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "https://www.jpost.com/middle-east/article-868432",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        288,
        0
      ],
      "id": "5359c373-c73b-4eb3-867b-57e83ffa6448",
      "name": "HTTP Request",
      "executeOnce": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "U08AYDL2FQD",
          "mode": "list",
          "cachedResultName": "vinokura"
        },
        "text": "={{$json[\"text\"]}}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2064,
        0
      ],
      "id": "0137555e-567a-4bc8-9f12-bd6875da934d",
      "name": "Send a message",
      "webhookId": "59f0336c-1fa9-42f2-825a-38f751024e62",
      "credentials": {
        "slackApi": {
          "id": "I5astSkOODZZU76Y",
          "name": "n8n Summery"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a summarization tool.\n\nSummarize the following text into exactly 5 meaningful bullet points and a short title.  \nThe article may be incomplete or noisy, but your goal is to extract the most useful or relevant points.\n\nRespond with only a valid JSON object — no commentary, code blocks, or <think> tags.\n\nFormat:\n{\n  \"title\": \"A clear headline describing the article (max 80 characters)\",\n  \"bullets\": [\n    \"First meaningful summary point\",\n    \"Second point\",\n    \"Third point\",\n    \"Fourth point\",\n    \"Fifth point\"\n  ]\n}\n\nRules:\n- Only use information from the input text.\n- If content is unclear, keep bullets short but avoid leaving them empty.\n- Never invent facts.\n- If a point is unclear, summarize it in vague but factual terms.\n- Return only the JSON above, with all 5 bullets populated.\n\nText:\n{{ $json[\"article\"] }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        832,
        0
      ],
      "id": "0f06810b-c710-4817-8912-fbaaba4b5fb1",
      "name": "Local Deep Seek",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const html = $json[\"data\"] || \"\";\n\n// try to scope to the main <article>, else fall back to whole HTML\nconst scope = (html.match(/<article[\\s\\S]*?<\\/article>/i) || [html])[0];\n\n// capture paragraphs, headings, and list items\nconst matches = scope.match(/<(p|h1|h2|li)[^>]*>(.*?)<\\/\\1>/gis);\n\nlet text = matches\n  ? matches\n      .map(m => m.replace(/<[^>]+>/g, '').trim())\n      .filter(Boolean)\n      .join('\\n\\n')\n  : 'No article content found.';\n\nreturn [{ json: { article: text } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        0
      ],
      "id": "68d82b85-5e59-4e9b-b6ff-4e81bf8a475f",
      "name": "Extract Article Text"
    },
    {
      "parameters": {
        "jsCode": "const source = ($json.source ?? \"Local\").toString();\nconst raw = ($json.text || $json.output || $json.content || \"\").toString();\n\n// 🧼 ---------- CLEANUP ----------\nlet s = raw\n  .replace(/<think>[\\s\\S]*?<\\/think>/gi, \"\")\n  .replace(/```(?:json)?\\s*([\\s\\S]*?)```/gi, \"$1\")\n  .replace(/^\\s*:warning:.*$/gmi, \"\")\n  .replace(/^\\s*(?:IT Onboarding Bot|APP\\b).*$\\n?/gmi, \"\")\n  .replace(/^\\s*Automated\\s*•.*$/gmi, \"\")\n  .replace(/^\\s*text\\s*$/gmi, \"\")\n  .replace(/^\\s*[{}]\\s*$/gm, \"\")\n  .replace(/,\\s*}/g, \"}\")\n  .replace(/,\\s*]/g, \"]\")\n  .trim();\n\n// 🧪 DEBUG LOG\nconsole.log(\"🔍 Cleaned input:\\n\", s);\n\n// 🧠 ---------- TRY JSON ----------\nlet obj = null;\ntry { obj = JSON.parse(s); } catch {}\nif (!obj) {\n  const match = s.match(/\\{[\\s\\S]*\\}/);\n  if (match) {\n    try { obj = JSON.parse(match[0]); } catch {}\n  }\n}\n\n// 🧠 ---------- EXTRACT FIELDS ----------\nlet title = \"\";\nlet bullets = [];\n\nif (obj && typeof obj === \"object\") {\n  title = (obj.title || \"\").toString().trim().slice(0, 80);\n  if (Array.isArray(obj.bullets)) {\n    bullets = obj.bullets.map(b => (b ?? \"\").toString().trim()).filter(Boolean);\n  }\n}\n\n// 🪂 ---------- FALLBACK ----------\nif (!title || bullets.length === 0) {\n  const lines = s.split(/\\r?\\n/).map(l => l.trim()).filter(Boolean);\n\n  if (!title) {\n    const tLine = lines.find(l => /^title\\s*[:\\-]\\s*/i.test(l));\n    title = (tLine\n      ? tLine.replace(/^title\\s*[:\\-]\\s*/i, \"\")\n      : lines.find(l => !/^(?:[-*•]|\\d+\\.)\\s+/.test(l)) ||\n        (bullets[0] ? bullets[0].split(/[.!?]\\s/)[0] : \"Summary\")\n    ).toString().trim().slice(0, 80);\n  }\n\n  if (bullets.length === 0) {\n    bullets = lines\n      .filter(l => /^(?:[-*•]|\\d+\\.)\\s+/.test(l))\n      .map(l => l.replace(/^(?:[-*•]|\\d+\\.)\\s+/, \"\").trim())\n      .filter(Boolean);\n\n    // If still no bullets, take long lines as fallback\n    if (bullets.length === 0) {\n      bullets = lines\n        .filter(l => l.length > 30)\n        .slice(0, 5)\n        .map(l => l.replace(/^(?:[-*•]|\\d+\\.)\\s+/, \"\").trim());\n    }\n  }\n}\n\n// 🧹 ---------- NORMALIZE ----------\nbullets = bullets\n  .map(b => b.replace(/^\\*\\*(.+?)\\*\\*$/, \"$1\").trim())\n  .filter(Boolean)\n  .slice(0, 5);\n\n// 🧾 ---------- OUTPUT ----------\nif (!title && bullets.length === 0) {\n  return [{\n    json: {\n      error: \"No summary content\",\n      source,\n      raw: s\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    title: title || \"Summary\",\n    bullets,\n    source\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        0
      ],
      "id": "11f0f268-4509-46e6-a909-cd81a6d10010",
      "name": "Validator"
    },
    {
      "parameters": {
        "jsCode": "const { title, bullets, error, raw } = $json;\n\nif (error) {\n  return [{\n    json: {\n      text: `⚠️ ${error}\\n\\n\\`\\`\\`\\n${raw?.slice(0, 500) || \"No raw content\"}\\n\\`\\`\\``\n    }\n  }];\n}\n\n// Clean the title: strip quotes and any 'title:' prefix\nconst cleanTitle = String(title || \"Summary\")\n  .replace(/^[\"']?title[\"']?\\s*[:\\-]\\s*/i, \"\")\n  .replace(/^[\"']|[\"']$/g, \"\")\n  .trim();\n\n// Clean bullets: strip surrounding quotes and redundant 'title' lines\nconst cleanBullets = (Array.isArray(bullets) ? bullets : [])\n  .map(b => String(b).trim())\n  .filter(b => !/^[\"']?title[\"']?\\s*[:\\-]/i.test(b)) // remove if line is title again\n  .map(b => b.replace(/^[\"']|[\"']$/g, \"\"))           // remove surrounding quotes\n  .filter(Boolean)\n  .slice(0, 5); // max 5\n\nconst text = [cleanTitle, ...cleanBullets.map(b => `- ${b}`)].join(\"\\n\");\nreturn [{ json: { text } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        0
      ],
      "id": "67ff21b2-89f0-4eee-9e78-2e83b3840eab",
      "name": "Formatter"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-oss-20b",
          "mode": "list",
          "cachedResultName": "openai/gpt-oss-20b"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        832,
        320
      ],
      "id": "1cf6e72b-3239-476a-99ea-10f747b4059d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "w0UTdzIRbJACBNrx",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Extract Article Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Local Deep Seek": {
      "main": [
        [
          {
            "node": "Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Article Text": {
      "main": [
        [
          {
            "node": "Local Deep Seek",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validator": {
      "main": [
        [
          {
            "node": "Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatter": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Local Deep Seek",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "36ba0bed-12c3-4d3b-8c2a-e07654248ebe",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-02T14:15:51.648Z",
      "updatedAt": "2025-09-02T14:15:51.648Z",
      "role": "workflow:owner",
      "workflowId": "UkPfwOVWETGpaImb",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}