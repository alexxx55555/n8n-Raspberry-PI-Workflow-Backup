{
  "createdAt": "2025-09-02T14:15:51.644Z",
  "updatedAt": "2025-09-24T12:04:45.000Z",
  "id": "UkPfwOVWETGpaImb",
  "name": "Slack Web Summary",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -96,
        0
      ],
      "id": "08a8a547-f00b-42e1-8587-46272f7de55d",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "https://www.jpost.com/international/article-867622",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        96,
        0
      ],
      "id": "5359c373-c73b-4eb3-867b-57e83ffa6448",
      "name": "HTTP Request",
      "executeOnce": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "__rl": true,
          "value": "U08AYDL2FQD",
          "mode": "list",
          "cachedResultName": "vinokura"
        },
        "text": "={{$json[\"text\"]}}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        2064,
        0
      ],
      "id": "0137555e-567a-4bc8-9f12-bd6875da934d",
      "name": "Send a message",
      "webhookId": "59f0336c-1fa9-42f2-825a-38f751024e62",
      "credentials": {
        "slackApi": {
          "id": "I5astSkOODZZU76Y",
          "name": "n8n Summery"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a summarization tool.\n\nSummarize the following text into exactly 5 meaningful bullet points and a short title.  \nThe article may be incomplete or noisy, but your goal is to extract the most useful or relevant points.\n\nRespond with only a valid JSON object — no commentary, code blocks, or <think> tags.\n\nFormat:\n{\n  \"title\": \"A clear headline describing the article (max 80 characters)\",\n  \"bullets\": [\n    \"First meaningful summary point\",\n    \"Second point\",\n    \"Third point\",\n    \"Fourth point\",\n    \"Fifth point\"\n  ]\n}\n\nRules:\n- Only use information from the input text.\n- If content is unclear, keep bullets short but avoid leaving them empty.\n- Never invent facts.\n- If a point is unclear, summarize it in vague but factual terms.\n- Return only the JSON above, with all 5 bullets populated.\n\nText:\nText:\n{{ $json[\"chunk\"] }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        832,
        0
      ],
      "id": "0f06810b-c710-4817-8912-fbaaba4b5fb1",
      "name": "Local Deep Seek",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "const html = $json[\"data\"] || \"\";\n\n// try to scope to the main <article>, else fall back to whole HTML\nconst scope = (html.match(/<article[\\s\\S]*?<\\/article>/i) || [html])[0];\n\n// capture paragraphs, headings, and list items\nconst matches = scope.match(/<(p|h1|h2|li)[^>]*>(.*?)<\\/\\1>/gis);\n\nlet text = matches\n  ? matches\n      .map(m => m.replace(/<[^>]+>/g, '').trim())\n      .filter(Boolean)\n      .join('\\n\\n')\n  : 'No article content found.';\n\nreturn [{ json: { article: text } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        336,
        0
      ],
      "id": "68d82b85-5e59-4e9b-b6ff-4e81bf8a475f",
      "name": "Extract Article Text"
    },
    {
      "parameters": {
        "jsCode": "// Log full input for debugging\nconsole.log(\"Full input to Validator:\", JSON.stringify($json, null, 2));\n\n// Get raw AI output\nlet raw = $json.output || $json.text || $json.content || \"\";\nconsole.log(\"Raw AI output:\", raw);\n\n// Ensure it's a string\nif (typeof raw !== \"string\") {\n  console.log(\"Raw is not a string, converting:\", typeof raw);\n  raw = JSON.stringify(raw);\n}\nconsole.log(\"Raw after string check:\", raw);\n\n// Clean the string (remove code blocks, think tags, and normalize dashes)\nlet s = raw\n  .replace(/```(?:json)?\\s*([\\s\\S]*?)```/gi, \"$1\")\n  .replace(/<think>[\\s\\S]*?<\\/think>/gi, \"\")\n  .replace(/‑/g, \"-\") // Replace en-dashes with regular dashes\n  .trim();\nconsole.log(\"Cleaned output:\", s);\n\n// Parse JSON\nlet obj = null;\ntry {\n  obj = JSON.parse(s);\n  console.log(\"Parsed object:\", JSON.stringify(obj, null, 2));\n  // Handle nested stringified JSON\n  while (typeof obj === \"string\") {\n    console.log(\"Nested string detected, parsing again:\", obj);\n    s = obj;\n    obj = JSON.parse(obj);\n  }\n} catch (e) {\n  console.log(\"JSON parse error:\", e.message, \"Input string:\", s.slice(0, 500));\n}\n\n// Fallback: attempt to extract JSON-like object\nif (!obj) {\n  console.log(\"Falling back to regex extraction\");\n  const m = s.match(/\\{[\\s\\S]*?\\}/); // Non-greedy match\n  if (m) {\n    try {\n      obj = JSON.parse(m[0]);\n      console.log(\"Fallback parsed object:\", JSON.stringify(obj, null, 2));\n    } catch (e) {\n      console.log(\"Fallback JSON parse error:\", e.message, \"Matched string:\", m[0]?.slice(0, 500));\n    }\n  } else {\n    console.log(\"No JSON-like object found in fallback regex\");\n  }\n}\n\n// Extract title and bullets with fallback\nlet title = obj && obj.title ? obj.title : \"Summary\";\nlet bullets = Array.isArray(obj?.bullets) ? obj.bullets : [];\nconsole.log(\"Extracted title:\", title, \"Bullets count:\", bullets.length, \"Bullets:\", bullets);\n\n// Enforce exactly 5 bullets\nif (bullets.length > 5) {\n  console.log(\"Truncating bullets from\", bullets.length, \"to 5\");\n  bullets = bullets.slice(0, 5);\n}\nwhile (bullets.length < 5) {\n  bullets.push(\"No further details available.\");\n}\n\nreturn [{ json: { title, bullets, source: $json.source || \"Local\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        0
      ],
      "id": "11f0f268-4509-46e6-a909-cd81a6d10010",
      "name": "Validator"
    },
    {
      "parameters": {
        "jsCode": "const { \n  title = \"Summary\", \n  bullets = [], \n  error = null, \n  raw = \"\", \n  url = \"\" \n} = $json || {};\n\nif (error) {\n  return [{\n    json: {\n      text: `⚠️ ${error}\\n\\n\\`\\`\\`\\n${raw?.slice(0, 500) || \"No raw content\"}\\n\\`\\`\\``\n    }\n  }];\n}\n\n// Clean title\nlet cleanTitle = String(title)\n  .replace(/^[^{\"]*\"?title[\"']?\\s*[:=–-]\\s*/i, \"\")\n  .replace(/^[\"']|[\"']$/g, \"\")\n  .replace(/[.,\"]+$/, \"\")\n  .trim()\n  .replace(/automated with this n8n workflow/i, \"\")\n  .trim();\n\n// Clean bullets\nlet cleanBullets = (Array.isArray(bullets) ? bullets : [])\n  .map(b => String(b).trim())\n  .filter(b => b && !/^[\"']?title[\"']?\\s*[:=–-]/i.test(b))\n  .filter(b => !/automated with this n8n workflow/i.test(b))\n  .map(b => {\n    const cleaned = b.replace(/^[\"']|[\"']$/g, \"\").replace(/[.,\"]+$/, \"\").trim();\n    return cleaned.endsWith(\".\") ? cleaned : `${cleaned}.`;\n  })\n  .filter(Boolean)\n  .slice(0, 5);\n\n// Guarantee 5 bullets\nwhile (cleanBullets.length < 5) {\n  cleanBullets.push(\"No further details available.\");\n}\n\n// Build Slack message\nconst parts = [\n  `*🧠 Summary:* ${url ? `<${url}|${cleanTitle}>` : `*${cleanTitle}*`}`,\n  \"\",\n  ...cleanBullets.map(b => `• ${b}`),\n  \"\"\n];\n\nreturn [{ json: { text: parts.join(\"\\n\") } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        0
      ],
      "id": "67ff21b2-89f0-4eee-9e78-2e83b3840eab",
      "name": "Formatter"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "openai/gpt-oss-20b",
          "mode": "list",
          "cachedResultName": "openai/gpt-oss-20b"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        832,
        320
      ],
      "id": "1cf6e72b-3239-476a-99ea-10f747b4059d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "tPLXnEcJzshXrwfS",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const CHUNK_SIZE = 3000, OVERLAP = 150, MAX_CHUNKS = 20;\nconst text = $json.article || \"\";\nconst chunks = [];\nfor (let i = 0; i < text.length && chunks.length < MAX_CHUNKS; i += (CHUNK_SIZE - OVERLAP)) {\n  chunks.push({ json: { chunk: text.slice(i, i + CHUNK_SIZE), index: chunks.length + 1 } });\n}\nreturn chunks;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        0
      ],
      "id": "b1c43f68-d168-4fc2-985b-e710a4814275",
      "name": "Chunker"
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Extract Article Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Local Deep Seek": {
      "main": [
        [
          {
            "node": "Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Article Text": {
      "main": [
        [
          {
            "node": "Chunker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validator": {
      "main": [
        [
          {
            "node": "Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatter": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Local Deep Seek",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Chunker": {
      "main": [
        [
          {
            "node": "Local Deep Seek",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "5e863fbc-3dcd-459e-b562-93b461fb9af2",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-02T14:15:51.648Z",
      "updatedAt": "2025-09-02T14:15:51.648Z",
      "role": "workflow:owner",
      "workflowId": "UkPfwOVWETGpaImb",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}