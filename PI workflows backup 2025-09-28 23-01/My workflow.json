{
  "createdAt": "2025-09-28T16:51:52.912Z",
  "updatedAt": "2025-09-28T18:51:21.000Z",
  "id": "WvXu0pxOgmwwtlqd",
  "name": "My workflow",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "8f4fc790-3570-4891-9ae8-42a42a16d7c3",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1632,
        -752
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Parse PowerShell output and extract model name\nconst input = $input.first();\nconst powershellOutput = input.json.stdout;\nconst serialNumber = input.json.serialNumber;\nconst itemId = input.json.itemId;\nconst itemName = input.json.itemName;\nconst modelColumnId = input.json.modelColumnId;\n\nlet modelName = '';\n\n// Clean up the PowerShell output\nif (powershellOutput) {\n  // Remove any extra whitespace and newlines\n  modelName = powershellOutput.trim();\n  \n  // Remove common PowerShell artifacts\n  modelName = modelName.replace(/^\\s*\\n/gm, '');\n  modelName = modelName.replace(/\\s+/g, ' ');\n  \n  // Remove any trailing dots or special characters\n  modelName = modelName.replace(/\\.$/, '');\n  \n  // If empty or contains error messages, set to 'Unknown'\n  if (!modelName || \n      modelName.includes('Error') || \n      modelName.includes('Exception') ||\n      modelName.includes('not found') ||\n      modelName.includes('Cannot') ||\n      modelName.length < 3) {\n    modelName = 'Model not found';\n  }\n}\nelse {\n  modelName = 'No output from script';\n}\n\nconsole.log(`Item: ${itemName} | Serial: ${serialNumber} | Model: ${modelName}`);\n\nreturn {\n  itemId: itemId,\n  itemName: itemName,\n  serialNumber: serialNumber,\n  modelName: modelName,\n  modelColumnId: modelColumnId\n};"
      },
      "id": "0dc472b7-0987-4742-a4c2-6f36a69b21fa",
      "name": "Parse Model from Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1136,
        -496
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Log the update result\nconst input = $input.first();\nconst itemName = input.json.itemName || 'Unknown item';\nconst modelName = input.json.modelName || 'N/A';\nconst itemId = input.json.itemId || 'unknown';\n\nconsole.log(`✅ Updated: ${itemName} (ID: ${itemId}) | Model: ${modelName}`);\n\n// Return data for batch processing to continue\nreturn {\n  success: true,\n  itemId: itemId,\n  itemName: itemName,\n  modelName: modelName,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "5fef7872-ed5b-441f-aea8-a0c195322d2b",
      "name": "Log Update Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        -496
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Final summary of all processed items\nconst allItems = $input.all();\nconst totalProcessed = allItems.length;\nconst successfulUpdates = allItems.filter(item => item.json.success).length;\n\nconsole.log(`\\n=== PROCESSING COMPLETE ===`);\nconsole.log(`Total items processed: ${totalProcessed}`);\nconsole.log(`Successful updates: ${successfulUpdates}`);\nconsole.log(`Failed updates: ${totalProcessed - successfulUpdates}`);\nconsole.log(`========================\\n`);\n\nreturn {\n  summary: {\n    totalProcessed: totalProcessed,\n    successfulUpdates: successfulUpdates,\n    failedUpdates: totalProcessed - successfulUpdates,\n    completedAt: new Date().toISOString()\n  },\n  processedItems: allItems.map(item => ({\n    itemId: item.json.itemId,\n    itemName: item.json.itemName,\n    modelName: item.json.modelName,\n    success: item.json.success\n  }))\n};"
      },
      "id": "29df4dd7-39b1-42e4-8684-8597543feab9",
      "name": "Final Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -144,
        -496
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "changeMultipleColumnValues",
        "boardId": "2107542488",
        "itemId": "={{ $json.itemId }}",
        "columnValues": "=(text_mkw78a6r) to {{ $json.modelName }}"
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        -864,
        -496
      ],
      "id": "25e980bd-f8cb-4270-928c-b8c429ba79ec",
      "name": "Change multiple column values for a board item",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -File \"C:\\Scripts\\Get-LenovoInfo.ps1\" -Serialnumber \"{{ $json.serialNumber }}\" | Select-Object -ExpandProperty ProductName -Unique",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        -1408,
        -496
      ],
      "id": "31a7992e-3444-4eb7-a833-9a46ae7c34a2",
      "name": "Get Model",
      "credentials": {
        "sshPassword": {
          "id": "79KNHZGwd8w288i9",
          "name": "SSH Password account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        1200,
        608
      ],
      "id": "39d5281a-e235-4d27-84fe-082fdd4bbd96",
      "name": "When clicking 'Execute workflow'"
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv06h76",
        "limit": 70
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        640,
        -448
      ],
      "id": "ccc6530c-a326-4bcf-80b4-721b13792304",
      "name": "Get Monday Items",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Filter for Lenovo devices with JR notes using correct column IDs\nconst items = $input.all();\nconst itemsToProcess = [];\n\n// Target serial numbers from Excel file\nconst targetSerialNumbers = [\n  'PC11AFQA', 'PF1KBWFN', 'PC18747L', 'PF1PEQXQ', 'PF13LXDK', 'PF1DDJC2', \n  'PF1SC5EZ', 'C02DQKTEQ05D', 'PF1PEQXC', 'PF1MQE1V', 'PF2RDLVD', 'PC1HBQQZ', \n  'PF1FYY9G', 'PF3B7PRH', 'PC0Y185J', 'PC0KNZ47', 'PF1M27XD', 'PC1MN3C1', \n  'PC1MN3C5', 'PC1MRL9X', 'PC11AFM5', 'PF1317SM', 'PC1LT958', 'PC0YBY3F', \n  'PF2863QC', 'PC1MN3C0', 'PC1HBRG3', 'PC101S2W', 'PC1MN3C3', 'PC13B1RK', \n  'PF1MQKAY', 'PF1SBWQ2', 'CND6420ZJS', 'PF37SHLR', 'PF2N1ZKH', 'PF37X5HN', \n  'R914EQLK', 'PF37RGE3', 'PF2RDK5Q', 'R914EQLB', 'PC151RNN', 'PF0YB9SG', \n  'PF3BGR7A', 'PF0NZNWE', 'PF3BGDJC', '20L7002CUS', 'PC0WWFKP', 'MP193DQL', \n  'R914EQLC', 'PF3B7Y3A', 'PF3B8G5L', 'PF2RDFMM', 'PF2RDLWA', 'R914EQLM', \n  'PF2RDHJT', 'PF2RDLS7', 'PF2RDK24', 'PF2RDMN1', 'PF24ET8Y', 'PF2RCDJK', \n  'PF3BGJ3Z', 'PF3B7VN4', 'PF2RDK56', 'PC1MN3C4', 'PC1MRL9W', 'PC1MN3C7', \n  'PF3117SE'\n];\n\nconsole.log(`Total items received: ${items.length}`);\n\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  const columnValues = item.json.column_values || [];\n  \n  // Serial number is in the item name\n  const serialNumber = item.json.name;\n  \n  // Find notes column (text_mkt53wba)\n  const notesColumn = columnValues.find(col => col.id === 'text_mkt53wba');\n  \n  // Find manufacturer column (color_mkt5y7ts) \n  const manufacturerColumn = columnValues.find(col => col.id === 'color_mkt5y7ts');\n  \n  // Find device model column (try text_mkw78a6r or text_mkv08y6s)\n  const modelColumn = columnValues.find(col => \n    col.id === 'text_mkw78a6r' || col.id === 'text_mkv08y6s'\n  );\n  \n  // Check if this is a target Lenovo device with JR notes\n  if (serialNumber && \n      targetSerialNumbers.includes(serialNumber.trim()) &&\n      notesColumn && \n      notesColumn.text === 'JR' &&\n      manufacturerColumn &&\n      manufacturerColumn.text === 'Lenovo') {\n    \n    console.log(`✅ Found target Lenovo JR device: ${serialNumber}`);\n    \n    itemsToProcess.push({\n      json: {\n        itemId: item.json.id,\n        itemName: item.json.name,\n        serialNumber: serialNumber.trim(),\n        modelColumnId: modelColumn ? modelColumn.id : 'text_mkw78a6r',\n        notes: notesColumn.text,\n        manufacturer: manufacturerColumn.text\n      }\n    });\n  }\n}\n\nconsole.log(`Found ${itemsToProcess.length} target Lenovo JR devices to process`);\n\nif (itemsToProcess.length === 0) {\n  return [{\n    json: {\n      message: \"No target Lenovo JR devices found\",\n      itemCount: 0\n    }\n  }];\n}\n\nreturn itemsToProcess;"
      },
      "id": "0ec0745f-5da6-4e00-8689-1504a5b95756",
      "name": "Filter Target Items",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        848,
        -448
      ],
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "error-check",
              "leftValue": "={{ $json.stderr }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "528c1f6c-406f-4d19-b089-e3467a329dbc",
      "name": "Check for Errors",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1776,
        -416
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Parse successful PowerShell output and extract model name\nconst input = $input.first();\nconst powershellOutput = input.json.stdout;\nconst serialNumber = input.json.serialNumber;\nconst itemId = input.json.itemId;\nconst itemName = input.json.itemName;\nconst modelColumnId = input.json.modelColumnId;\n\nlet modelName = '';\n\n// Clean up the PowerShell output\nif (powershellOutput) {\n  // Remove any extra whitespace and newlines\n  modelName = powershellOutput.trim();\n  \n  // Remove common PowerShell artifacts\n  modelName = modelName.replace(/^\\s*\\n/gm, '');\n  modelName = modelName.replace(/\\s+/g, ' ');\n  \n  // Remove any trailing dots or special characters\n  modelName = modelName.replace(/\\.$/, '');\n  \n  // If empty or contains error messages, set to 'Unknown'\n  if (!modelName || \n      modelName.includes('Error') || \n      modelName.includes('Exception') ||\n      modelName.includes('not found') ||\n      modelName.includes('Cannot') ||\n      modelName.length < 3) {\n    modelName = 'Model not found';\n  }\n}\nelse {\n  modelName = 'No output from script';\n}\n\nconsole.log(`✅ SUCCESS - Item: ${itemName} | Serial: ${serialNumber} | Model: ${modelName}`);\n\nreturn {\n  itemId: itemId,\n  itemName: itemName,\n  serialNumber: serialNumber,\n  modelName: modelName,\n  modelColumnId: modelColumnId,\n  success: true\n};"
      },
      "id": "040a8323-8b51-4bfd-a2a7-059e91d9f3d8",
      "name": "Parse Success Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        -496
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Handle PowerShell errors\nconst input = $input.first();\nconst error = input.json.stderr || 'Unknown error';\nconst serialNumber = input.json.serialNumber;\nconst itemId = input.json.itemId;\nconst itemName = input.json.itemName;\nconst modelColumnId = input.json.modelColumnId;\n\nconsole.error(`❌ ERROR - Item: ${itemName} (${serialNumber}): ${error}`);\n\nreturn {\n  itemId: itemId,\n  itemName: itemName,\n  serialNumber: serialNumber,\n  modelName: 'Error retrieving model',\n  modelColumnId: modelColumnId,\n  error: error,\n  success: false\n};"
      },
      "id": "d8c67493-38a6-4849-ad9b-fee13ec560d7",
      "name": "Handle Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        -336
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "changeMultipleColumnValues",
        "boardId": "2107542488",
        "itemId": "={{ $json.itemId }}",
        "columnValues": "={{ {\"text_mkw78a6r\": $json.modelName} }}"
      },
      "id": "0c74503a-abf9-4ab9-9f51-8ea8281ee638",
      "name": "Update Monday.com",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        2224,
        -416
      ],
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ddea642c-47f7-4fcf-bbfc-7eb0974c3787",
      "name": "Split In Batches1",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1184,
        -672
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Final summary of all processed items\nconst allItems = $input.all();\nconst totalProcessed = allItems.length;\nconst successfulUpdates = allItems.filter(item => item.json.success).length;\n\nconsole.log(`\\n=== PROCESSING COMPLETE ===`);\nconsole.log(`Total items processed: ${totalProcessed}`);\nconsole.log(`Successful updates: ${successfulUpdates}`);\nconsole.log(`Failed updates: ${totalProcessed - successfulUpdates}`);\nconsole.log(`========================\\n`);\n\nreturn {\n  summary: {\n    totalProcessed: totalProcessed,\n    successfulUpdates: successfulUpdates,\n    failedUpdates: totalProcessed - successfulUpdates,\n    completedAt: new Date().toISOString()\n  },\n  processedItems: allItems.map(item => ({\n    itemId: item.json.itemId || 'unknown',\n    itemName: item.json.itemName || 'unknown',\n    modelName: item.json.modelName || 'unknown',\n    success: item.json.success || false\n  }))\n};"
      },
      "id": "7bca492f-a671-46d3-8730-485771933b13",
      "name": "Final Summary1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1344,
        -144
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -File \"C:\\Scripts\\Get-LenovoInfo.ps1\" -Serialnumber \"{{ $json.serialNumber }}\" | Select-Object -ExpandProperty ProductName -Unique | Out-String",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1824,
        -784
      ],
      "id": "219fa085-7172-45a9-b8e9-00c216eb2d85",
      "name": "Get Model1",
      "credentials": {
        "sshPassword": {
          "id": "79KNHZGwd8w288i9",
          "name": "SSH Password account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Log the update result and prepare for next batch iteration\nconst input = $input.first();\nconst itemName = input.json.itemName || 'Unknown item';\nconst modelName = input.json.modelName || 'N/A';\nconst itemId = input.json.itemId || 'unknown';\nconst success = input.json.success !== false; // Default to true unless explicitly false\n\nif (success) {\n  console.log(`✅ UPDATED: ${itemName} (ID: ${itemId}) | Model: ${modelName}`);\n} else {\n  console.log(`❌ FAILED: ${itemName} (ID: ${itemId}) | Error: ${input.json.error || 'Unknown error'}`);\n}\n\n// Return data for batch processing to continue\nreturn {\n  success: success,\n  itemId: itemId,\n  itemName: itemName,\n  modelName: modelName,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "49cb97fb-2a0c-4c90-9419-cdecc1751873",
      "name": "Log Update Result1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2448,
        -416
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "getAll",
        "boardId": "2107542488",
        "groupId": "group_mkv06h76",
        "limit": 70
      },
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        1456,
        608
      ],
      "id": "becf5501-6c15-4089-9968-2a3e1d3b26a4",
      "name": "Get Monday Items1",
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Filter for just ONE Lenovo device for testing\nconst items = $input.all();\nconst itemsToProcess = [];\n\n// TEST WITH JUST ONE DEVICE - change this serial number to one you want to test\nconst testSerialNumber = 'PC11AFQA'; // <-- CHANGE THIS TO YOUR TEST DEVICE\n\nconsole.log(`Total items received: ${items.length}`);\nconsole.log(`Looking for test device: ${testSerialNumber}`);\n\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  const columnValues = item.json.column_values || [];\n  \n  // Serial number is in the item name\n  const serialNumber = item.json.name;\n  \n  // Find notes column (text_mkt53wba)\n  const notesColumn = columnValues.find(col => col.id === 'text_mkt53wba');\n  \n  // Find manufacturer column (color_mkt5y7ts) \n  const manufacturerColumn = columnValues.find(col => col.id === 'color_mkt5y7ts');\n  \n  // Find device model column (try text_mkw78a6r or text_mkv08y6s)\n  const modelColumn = columnValues.find(col => \n    col.id === 'text_mkw78a6r' || col.id === 'text_mkv08y6s'\n  );\n  \n  // Check if this is our test device\n  if (serialNumber && serialNumber.trim() === testSerialNumber) {\n    console.log(`🔍 Found test device: ${serialNumber}`);\n    console.log(`   Notes: ${notesColumn ? notesColumn.text : 'not found'}`);\n    console.log(`   Manufacturer: ${manufacturerColumn ? manufacturerColumn.text : 'not found'}`);\n    \n    // Process this device regardless of notes/manufacturer for testing\n    itemsToProcess.push({\n      json: {\n        itemId: item.json.id,\n        itemName: item.json.name,\n        serialNumber: serialNumber.trim(),\n        modelColumnId: modelColumn ? modelColumn.id : 'text_mkw78a6r',\n        notes: notesColumn ? notesColumn.text : 'no notes',\n        manufacturer: manufacturerColumn ? manufacturerColumn.text : 'no manufacturer'\n      }\n    });\n    \n    break; // Stop after finding the test device\n  }\n}\n\nif (itemsToProcess.length === 0) {\n  console.log(`❌ Test device '${testSerialNumber}' not found in Monday.com`);\n  return [{\n    json: {\n      message: `Test device '${testSerialNumber}' not found`,\n      itemCount: 0\n    }\n  }];\n} else {\n  console.log(`✅ Found test device, proceeding with processing`);\n}\n\nreturn itemsToProcess;"
      },
      "id": "107da51d-510f-4a7c-b360-25718fdbad3f",
      "name": "Filter Target Items1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        608
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "196de3de-edbb-4137-9242-2021c03dc860",
      "name": "Split In Batches2",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2176,
        368
      ],
      "disabled": true
    },
    {
      "parameters": {
        "command": "=powershell.exe -NoProfile -ExecutionPolicy Bypass -File \"C:\\Scripts\\Get-LenovoInfo.ps1\" -Serialnumber '{{ $json.serialNumber }}' -Type Warranty -Brief\n",
        "cwd": "="
      },
      "type": "n8n-nodes-base.ssh",
      "typeVersion": 1,
      "position": [
        1920,
        608
      ],
      "id": "cc84a9f1-436f-451c-8aca-0fbd6dca422f",
      "name": "Get Model2",
      "credentials": {
        "sshPassword": {
          "id": "79KNHZGwd8w288i9",
          "name": "SSH Password account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "error-check",
              "leftValue": "={{ $json.stderr }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "e39dadf7-b3b4-46d4-9fa2-e9b1429d272a",
      "name": "Check for Errors1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2352,
        608
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const data = JSON.parse($json.stdout);\nreturn Array.isArray(data) ? data.map(d => ({ json: d })) : [{ json: data }];\n"
      },
      "id": "b45392e7-7ffd-4ac5-9cb3-b21806824f52",
      "name": "Parse Success Output1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2160,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle PowerShell errors\nconst input = $input.first();\nconst error = input.json.stderr || 'Unknown error';\nconst serialNumber = input.json.serialNumber;\nconst itemId = input.json.itemId;\nconst itemName = input.json.itemName;\nconst modelColumnId = input.json.modelColumnId;\n\nconsole.error(`❌ ERROR - Item: ${itemName} (${serialNumber}): ${error}`);\n\nreturn {\n  itemId: itemId,\n  itemName: itemName,\n  serialNumber: serialNumber,\n  modelName: 'Error retrieving model',\n  modelColumnId: modelColumnId,\n  error: error,\n  success: false\n};"
      },
      "id": "4ff1c9b8-bcde-4d86-8546-082ab99660b9",
      "name": "Handle Error1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2576,
        688
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "boardItem",
        "operation": "changeMultipleColumnValues",
        "boardId": "2107542488",
        "itemId": "={{ $json.itemId }}",
        "columnValues": "={{ {\"text_mkw78a6r\": $json.modelName} }}"
      },
      "id": "385bdd0b-ece7-421d-951a-cb06945aeeea",
      "name": "Update Monday.com1",
      "type": "n8n-nodes-base.mondayCom",
      "typeVersion": 1,
      "position": [
        2800,
        608
      ],
      "credentials": {
        "mondayComApi": {
          "id": "tL56OUnJPXJjPxm4",
          "name": "Monday.com account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Log the update result and prepare for next batch iteration\nconst input = $input.first();\nconst itemName = input.json.itemName || 'Unknown item';\nconst modelName = input.json.modelName || 'N/A';\nconst itemId = input.json.itemId || 'unknown';\nconst success = input.json.success !== false; // Default to true unless explicitly false\n\nif (success) {\n  console.log(`✅ UPDATED: ${itemName} (ID: ${itemId}) | Model: ${modelName}`);\n} else {\n  console.log(`❌ FAILED: ${itemName} (ID: ${itemId}) | Error: ${input.json.error || 'Unknown error'}`);\n}\n\n// Return data for batch processing to continue\nreturn {\n  success: success,\n  itemId: itemId,\n  itemName: itemName,\n  modelName: modelName,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "2a8b809d-1023-408c-a1f8-8b79a8170d91",
      "name": "Log Update Result2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3024,
        608
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Final summary of all processed items\nconst allItems = $input.all();\nconst totalProcessed = allItems.length;\nconst successfulUpdates = allItems.filter(item => item.json.success).length;\n\nconsole.log(`\\n=== PROCESSING COMPLETE ===`);\nconsole.log(`Total items processed: ${totalProcessed}`);\nconsole.log(`Successful updates: ${successfulUpdates}`);\nconsole.log(`Failed updates: ${totalProcessed - successfulUpdates}`);\nconsole.log(`========================\\n`);\n\nreturn {\n  summary: {\n    totalProcessed: totalProcessed,\n    successfulUpdates: successfulUpdates,\n    failedUpdates: totalProcessed - successfulUpdates,\n    completedAt: new Date().toISOString()\n  },\n  processedItems: allItems.map(item => ({\n    itemId: item.json.itemId || 'unknown',\n    itemName: item.json.itemName || 'unknown',\n    modelName: item.json.modelName || 'unknown',\n    success: item.json.success || false\n  }))\n};"
      },
      "id": "e7d04a03-0fd2-4d20-85b5-cbcb9706a42c",
      "name": "Final Summary2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2656,
        896
      ],
      "disabled": true
    }
  ],
  "connections": {
    "Split In Batches": {
      "main": [
        [],
        [
          {
            "node": "Get Model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Update Result": {
      "main": [
        [
          {
            "node": "Final Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Change multiple column values for a board item": {
      "main": [
        [
          {
            "node": "Log Update Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model": {
      "main": [
        [
          {
            "node": "Parse Model from Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Model from Output": {
      "main": [
        [
          {
            "node": "Change multiple column values for a board item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking 'Execute workflow'": {
      "main": [
        [
          {
            "node": "Get Monday Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items": {
      "main": [
        [
          {
            "node": "Filter Target Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items": {
      "main": [
        [
          {
            "node": "Split In Batches1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Errors": {
      "main": [
        [
          {
            "node": "Parse Success Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output": {
      "main": [
        [
          {
            "node": "Update Monday.com",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Update Monday.com",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Monday.com": {
      "main": [
        [
          {
            "node": "Log Update Result1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches1": {
      "main": [
        [
          {
            "node": "Final Summary1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Model1": {
      "main": [
        [
          {
            "node": "Check for Errors",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Update Result1": {
      "main": [
        [
          {
            "node": "Split In Batches1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Monday Items1": {
      "main": [
        [
          {
            "node": "Filter Target Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Target Items1": {
      "main": [
        [
          {
            "node": "Get Model2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches2": {
      "main": [
        [],
        []
      ]
    },
    "Get Model2": {
      "main": [
        [
          {
            "node": "Parse Success Output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Errors1": {
      "main": [
        [],
        [
          {
            "node": "Handle Error1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Success Output1": {
      "main": [
        []
      ]
    },
    "Handle Error1": {
      "main": [
        [
          {
            "node": "Update Monday.com1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Monday.com1": {
      "main": [
        [
          {
            "node": "Log Update Result2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Update Result2": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Jerusalem",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "c8fff123-b253-438c-9d52-51efd203a7ad",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-09-28T16:51:52.916Z",
      "updatedAt": "2025-09-28T16:51:52.916Z",
      "role": "workflow:owner",
      "workflowId": "WvXu0pxOgmwwtlqd",
      "projectId": "NptNxIUgBjUJaRfd"
    }
  ],
  "tags": []
}